
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000107a  0000110e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000107a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800100  00800100  0000110e  2**0
                  ALLOC
  3 .stab         00000e94  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000049  00000000  00000000  00001fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001fed  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c8  00000000  00000000  00002000  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c8c  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000088e  00000000  00000000  00003d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000069a  00000000  00000000  000045e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000278  00000000  00000000  00004c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000089d  00000000  00000000  00004ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cf9  00000000  00000000  00005791  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  0000648a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__ctors_end>
       4:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_1>
       8:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
       c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      14:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      18:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      1c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      20:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      24:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      28:	0c 94 b3 02 	jmp	0x566	; 0x566 <__vector_10>
      2c:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_11>
      30:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      34:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      38:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      3c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      40:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      44:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      48:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      4c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      50:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      54:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      58:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      5c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      60:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      64:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      68:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      6c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      70:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      74:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      78:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      7c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      80:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      84:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      88:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      8c:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      90:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>
      94:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__bad_interrupt>

00000098 <__trampolines_end>:
      98:	00 01       	movw	r0, r0
      9a:	50 01       	movw	r10, r0
      9c:	01 12       	cpse	r0, r17
      9e:	00 02       	muls	r16, r16
      a0:	0c 01       	movw	r0, r24
      a2:	01 22       	and	r0, r17
      a4:	00 21       	and	r16, r0
      a6:	1e 01       	movw	r2, r28
      a8:	01 09       	sbc	r16, r1
      aa:	00 22       	and	r0, r16
      ac:	b8 02       	muls	r27, r24
      ae:	01 6e       	ori	r16, 0xE1	; 225

000000b0 <cfg_descriptors_PP>:
      b0:	00 01 62 01 01 12 00 02 0c 01 01 22 00 21 1e 01     ..b........".!..
      c0:	01 09 00 22 b8 02 01 6e                             ..."...n

000000c8 <cfg_descriptors_3DP>:
      c8:	00 01 74 01 01 12 00 02 2e 01 01 22 00 21 40 01     ..t........".!@.
      d8:	01 09 00 22 26 03 01 64                             ..."&..d

000000e0 <str_descriptors>:
      e0:	00 03 b4 02 01 04 01 03 82 02 01 32 02 03 00 00     ...........2....
      f0:	02 0a 03 03 34 02 01 44 04 03 e2 01 01 52 05 03     ....4..D.....R..
     100:	86 01 01 5c                                         ...\

00000104 <endpoint_config_table>:
     104:	00 00 00 01 c1 06 00 00                             ........

0000010c <usbConfigurationDescFFP>:
     10c:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
     11c:	00 00 09 21 11 01 00 01 22 6e 00 07 05 84 03 08     ...!...."n......
     12c:	00 02                                               ..

0000012e <usbConfigurationDesc3DP>:
     12e:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
     13e:	00 00 09 21 11 01 00 01 22 64 00 07 05 84 03 08     ...!...."d......
     14e:	00 02                                               ..

00000150 <usbDeviceDescFFP>:
     150:	12 01 00 02 00 00 00 40 5e 04 05 00 00 04 01 05     .......@^.......
     160:	02 01                                               ..

00000162 <usbDeviceDescPP>:
     162:	12 01 00 02 00 00 00 40 5e 04 04 00 00 04 01 04     .......@^.......
     172:	02 01                                               ..

00000174 <usbDeviceDesc3DP>:
     174:	12 01 00 02 00 00 00 40 5e 04 02 00 00 04 01 03     .......@^.......
     184:	02 01                                               ..

00000186 <usbStringDescProFFP>:
     186:	5c 03 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00     \.M.i.c.r.o.s.o.
     196:	66 00 74 00 20 00 53 00 69 00 64 00 65 00 57 00     f.t. .S.i.d.e.W.
     1a6:	69 00 6e 00 64 00 65 00 72 00 20 00 46 00 6f 00     i.n.d.e.r. .F.o.
     1b6:	72 00 63 00 65 00 20 00 46 00 65 00 65 00 64 00     r.c.e. .F.e.e.d.
     1c6:	62 00 61 00 63 00 6b 00 20 00 50 00 72 00 6f 00     b.a.c.k. .P.r.o.
     1d6:	20 00 28 00 55 00 53 00 42 00 29 00                  .(.U.S.B.).

000001e2 <usbStringDescProPP>:
     1e2:	52 03 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00     R.M.i.c.r.o.s.o.
     1f2:	66 00 74 00 20 00 53 00 69 00 64 00 65 00 57 00     f.t. .S.i.d.e.W.
     202:	69 00 6e 00 64 00 65 00 72 00 20 00 50 00 72 00     i.n.d.e.r. .P.r.
     212:	65 00 63 00 69 00 73 00 69 00 6f 00 6e 00 20 00     e.c.i.s.i.o.n. .
     222:	50 00 72 00 6f 00 20 00 28 00 55 00 53 00 42 00     P.r.o. .(.U.S.B.
     232:	29 00                                               ).

00000234 <usbStringDescPro3DP>:
     234:	44 03 4d 00 69 00 63 00 72 00 6f 00 73 00 6f 00     D.M.i.c.r.o.s.o.
     244:	66 00 74 00 20 00 53 00 69 00 64 00 65 00 57 00     f.t. .S.i.d.e.W.
     254:	69 00 6e 00 64 00 65 00 72 00 20 00 33 00 44 00     i.n.d.e.r. .3.D.
     264:	20 00 50 00 72 00 6f 00 20 00 28 00 55 00 53 00      .P.r.o. .(.U.S.
     274:	42 00 29 00                                         B.).

00000278 <usbStringDescSer>:
     278:	0a 03 30 00 33 00 33 00 33 00                       ..0.3.3.3.

00000282 <usbStringDescMan>:
     282:	32 03 44 00 65 00 74 00 6c 00 65 00 66 00 20 00     2.D.e.t.l.e.f. .
     292:	3c 00 47 00 72 00 65 00 6e 00 64 00 65 00 6c 00     <.G.r.e.n.d.e.l.
     2a2:	3e 00 20 00 4d 00 75 00 65 00 6c 00 6c 00 65 00     >. .M.u.e.l.l.e.
     2b2:	72 00                                               r.

000002b4 <usbStringDescLan>:
     2b4:	04 03 09 04                                         ....

000002b8 <usbHidRepDescFFP>:
     2b8:	05 01 09 04 a1 01 09 01 a1 00 95 02 75 0a 16 00     ............u...
     2c8:	fe 26 ff 01 35 00 46 ff 03 09 30 09 31 81 02 95     .&..5.F...0.1...
     2d8:	01 75 04 15 00 25 07 46 3b 01 65 14 09 39 81 42     .u...%.F;.e..9.B
     2e8:	75 06 15 e0 25 1f 45 2e 09 35 81 02 95 04 75 01     u...%.E..5....u.
     2f8:	15 00 25 01 45 01 65 00 a4 05 09 19 01 29 04 81     ..%.E.e......)..
     308:	02 c0 95 05 19 05 29 09 81 02 b4 95 01 75 07 15     ......)......u..
     318:	c0 25 3f 45 7f 09 36 81 02 75 02 81 01 c0           .%?E..6..u....

00000326 <usbHidRepDesc3DP>:
     326:	05 01 09 04 a1 01 09 01 a1 00 95 02 75 0a 16 00     ............u...
     336:	fe 26 ff 01 35 00 46 ff 03 a4 09 30 09 31 81 02     .&..5.F....0.1..
     346:	95 01 75 09 16 00 ff 26 ff 00 45 2e 65 14 09 35     ..u....&..E.e..5
     356:	81 02 75 04 15 00 25 07 46 3b 01 09 39 81 42 95     ..u...%.F;..9.B.
     366:	04 75 01 25 01 45 01 65 00 05 09 19 01 29 04 81     .u.%.E.e.....)..
     376:	02 c0 19 05 29 08 81 02 b4 95 01 09 36 81 02 75     ....).......6..u
     386:	05 81 01 c0                                         ....

0000038a <__ctors_end>:
     38a:	11 24       	eor	r1, r1
     38c:	1f be       	out	0x3f, r1	; 63
     38e:	cf ef       	ldi	r28, 0xFF	; 255
     390:	d0 e2       	ldi	r29, 0x20	; 32
     392:	de bf       	out	0x3e, r29	; 62
     394:	cd bf       	out	0x3d, r28	; 61

00000396 <Init3>:
// uint8_t VA_NOINIT( mcusr_cpy ) ;

void FA_INIT3(Init3)(void)
{
	//  mcusr_cpy = MCUSR ;				// If we need to examine reset reason
	MCUSR = 0;
     396:	14 be       	out	0x34, r1	; 52
	wdt_disable();
     398:	88 e1       	ldi	r24, 0x18	; 24
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	f8 94       	cli
     39e:	80 93 60 00 	sts	0x0060, r24
     3a2:	10 92 60 00 	sts	0x0060, r1
     3a6:	0f be       	out	0x3f, r0	; 63

000003a8 <__do_clear_bss>:
     3a8:	21 e0       	ldi	r18, 0x01	; 1
     3aa:	a0 e0       	ldi	r26, 0x00	; 0
     3ac:	b1 e0       	ldi	r27, 0x01	; 1
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	ae 36       	cpi	r26, 0x6E	; 110
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0e 94 40 07 	call	0xe80	; 0xe80 <main>
     3bc:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <_exit>

000003c0 <__bad_interrupt>:
     3c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c4 <lookup>:
// Look up a descriptor

static uint8_t * FA_NOINLINE( lookup )
    ( uint16_t wValue, M_IF_C( uint16_t wIndex ) const descriptor_list_t *desc, uint8_t len )
{
    for ( ; len-- ; ++desc )
     3c4:	44 23       	and	r20, r20
     3c6:	51 f0       	breq	.+20     	; 0x3dc <lookup+0x18>
	if (          pgm_read_word( &desc->wValue ) == wValue
     3c8:	fb 01       	movw	r30, r22
     3ca:	25 91       	lpm	r18, Z+
     3cc:	34 91       	lpm	r19, Z
     3ce:	41 50       	subi	r20, 0x01	; 1
     3d0:	28 17       	cp	r18, r24
     3d2:	39 07       	cpc	r19, r25
     3d4:	31 f0       	breq	.+12     	; 0x3e2 <lookup+0x1e>
// Look up a descriptor

static uint8_t * FA_NOINLINE( lookup )
    ( uint16_t wValue, M_IF_C( uint16_t wIndex ) const descriptor_list_t *desc, uint8_t len )
{
    for ( ; len-- ; ++desc )
     3d6:	6a 5f       	subi	r22, 0xFA	; 250
     3d8:	7f 4f       	sbci	r23, 0xFF	; 255
     3da:	f4 cf       	rjmp	.-24     	; 0x3c4 <lookup>
	if (          pgm_read_word( &desc->wValue ) == wValue
	     M_IF( && pgm_read_word( &desc->wIndex ) == wIndex )
	   )
	    return ( VP( desc ) ) ;

    return ( NULL ) ;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	08 95       	ret
     3e2:	cb 01       	movw	r24, r22
}
     3e4:	08 95       	ret

000003e6 <usb_send_EP0>:
//------------------------------------------------------------------------------

// Send data block via EP0

static void FA_NOINLINE( usb_send_EP0 ) ( const uint8_t *p, desc_sz_t len, uint8_t where )
{
     3e6:	cf 92       	push	r12
     3e8:	df 92       	push	r13
     3ea:	ef 92       	push	r14
     3ec:	ff 92       	push	r15
     3ee:	0f 93       	push	r16
     3f0:	1f 93       	push	r17
     3f2:	cf 93       	push	r28
     3f4:	df 93       	push	r29
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <usb_send_EP0+0x12>
     3f8:	1f 92       	push	r1
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	8c 01       	movw	r16, r24

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     400:	8e ef       	ldi	r24, 0xFE	; 254
     402:	e8 2e       	mov	r14, r24
    {
	// wait until IN packet sent

	do
	{
	    i = UEINTX ;
     404:	80 91 e8 00 	lds	r24, 0x00E8
	}
	while ( bits_are_clear( i, _BV( TXINI ) | _BV( RXOUTI ) ) ) ;
     408:	98 2f       	mov	r25, r24
     40a:	95 70       	andi	r25, 0x05	; 5
     40c:	d9 f3       	breq	.-10     	; 0x404 <usb_send_EP0+0x1e>

	if ( i & _BV( RXOUTI ) )
     40e:	82 fd       	sbrc	r24, 2
     410:	2f c0       	rjmp	.+94     	; 0x470 <usb_send_EP0+0x8a>
	    return ;				// Got OUT packet, abort

	// Set up IN packet

	n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE ;
     412:	26 2f       	mov	r18, r22
     414:	61 34       	cpi	r22, 0x41	; 65
     416:	08 f0       	brcs	.+2      	; 0x41a <usb_send_EP0+0x34>
     418:	20 e4       	ldi	r18, 0x40	; 64

	for ( i = n ; i-- ; ++p )
     41a:	f2 2e       	mov	r15, r18
     41c:	68 01       	movw	r12, r16
     41e:	fa 94       	dec	r15
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	f8 16       	cp	r15, r24
     424:	e9 f0       	breq	.+58     	; 0x460 <usb_send_EP0+0x7a>
	    if ( where == IN_RAM )
     426:	41 11       	cpse	r20, r1
     428:	03 c0       	rjmp	.+6      	; 0x430 <usb_send_EP0+0x4a>
		UEDATX = *p ;
     42a:	f6 01       	movw	r30, r12
     42c:	80 81       	ld	r24, Z
     42e:	04 c0       	rjmp	.+8      	; 0x438 <usb_send_EP0+0x52>
	    else
	    if ( where == IN_ROM )
     430:	41 30       	cpi	r20, 0x01	; 1
     432:	29 f4       	brne	.+10     	; 0x43e <usb_send_EP0+0x58>
		UEDATX = pgm_read_byte( p ) ;
     434:	f6 01       	movw	r30, r12
     436:	84 91       	lpm	r24, Z
     438:	80 93 f1 00 	sts	0x00F1, r24
     43c:	0d c0       	rjmp	.+26     	; 0x458 <usb_send_EP0+0x72>
	    else
	    if ( where == IN_EEP )
     43e:	42 30       	cpi	r20, 0x02	; 2
     440:	59 f4       	brne	.+22     	; 0x458 <usb_send_EP0+0x72>
		UEDATX = eeprom_read_byte( p ) ;
     442:	c6 01       	movw	r24, r12
     444:	29 83       	std	Y+1, r18	; 0x01
     446:	4b 83       	std	Y+3, r20	; 0x03
     448:	6a 83       	std	Y+2, r22	; 0x02
     44a:	0e 94 25 08 	call	0x104a	; 0x104a <__eerd_byte_usb1286>
     44e:	80 93 f1 00 	sts	0x00F1, r24
     452:	6a 81       	ldd	r22, Y+2	; 0x02
     454:	4b 81       	ldd	r20, Y+3	; 0x03
     456:	29 81       	ldd	r18, Y+1	; 0x01

	// Set up IN packet

	n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE ;

	for ( i = n ; i-- ; ++p )
     458:	ff ef       	ldi	r31, 0xFF	; 255
     45a:	cf 1a       	sub	r12, r31
     45c:	df 0a       	sbc	r13, r31
     45e:	df cf       	rjmp	.-66     	; 0x41e <usb_send_EP0+0x38>
     460:	02 0f       	add	r16, r18
     462:	11 1d       	adc	r17, r1

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     464:	e0 92 e8 00 	sts	0x00E8, r14
	    if ( where == IN_EEP )
		UEDATX = eeprom_read_byte( p ) ;

	usb_send_in() ;

	len -= n ;
     468:	62 1b       	sub	r22, r18
    }
    while ( len || n == ENDPOINT0_SIZE ) ;	// Send ZLP if ! (len % EP0sz)
     46a:	61 f6       	brne	.-104    	; 0x404 <usb_send_EP0+0x1e>
     46c:	20 34       	cpi	r18, 0x40	; 64
     46e:	51 f2       	breq	.-108    	; 0x404 <usb_send_EP0+0x1e>
}
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	df 90       	pop	r13
     484:	cf 90       	pop	r12
     486:	08 95       	ret

00000488 <usb_init>:
//******************************************************************************

// Initialize USB system

void usb_init ( void )
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
	i, *s, *d ;

    d = NULL ;
    i = USB_STRING_DESC_SER_SZ ;

    if ( eeprom_read_byte( d ) == i )
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 25 08 	call	0x104a	; 0x104a <__eerd_byte_usb1286>
     494:	8a 30       	cpi	r24, 0x0A	; 10
     496:	b1 f4       	brne	.+44     	; 0x4c4 <usb_init+0x3c>

void usb_init ( void )
{
    chk_serial() ;

    HW_CONFIG() ;
     498:	81 e8       	ldi	r24, 0x81	; 129
     49a:	80 93 d7 00 	sts	0x00D7, r24

    // fire up USB

    USBCON = _B1(USBE) | _B1(FRZCLK) ;	// enable USB module w/ frozen clock
     49e:	80 ea       	ldi	r24, 0xA0	; 160
     4a0:	80 93 d8 00 	sts	0x00D8, r24

    // config PLL, wait for PLL lock

    for ( PLL_CONFIG() ; bit_is_clear( PLLCSR, PLOCK ) ; )
     4a4:	86 e1       	ldi	r24, 0x16	; 22
     4a6:	89 bd       	out	0x29, r24	; 41
     4a8:	09 b4       	in	r0, 0x29	; 41
     4aa:	00 fe       	sbrs	r0, 0
     4ac:	fd cf       	rjmp	.-6      	; 0x4a8 <usb_init+0x20>
	;

    USB_CONFIG() ;			// start USB clock
     4ae:	80 e9       	ldi	r24, 0x90	; 144
     4b0:	80 93 d8 00 	sts	0x00D8, r24

    UDCON = _B0(DETACH) ;		// enable attach resistor
     4b4:	10 92 e0 00 	sts	0x00E0, r1

    UDIEN = _B1(EORSTE) |		// setup RX
     4b8:	89 e0       	ldi	r24, 0x09	; 9
     4ba:	80 93 e2 00 	sts	0x00E2, r24
//	    _B1(SOFE) |			// SOF
//	    _B1(WAKEUPE) |		// wakeup
	    _B1(SUSPE)  ;		// suspend
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret
	i, *s, *d ;

    d = NULL ;
    i = USB_STRING_DESC_SER_SZ ;

    if ( eeprom_read_byte( d ) == i )
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
     4c8:	fe 01       	movw	r30, r28
     4ca:	e8 58       	subi	r30, 0x88	; 136
     4cc:	fd 4f       	sbci	r31, 0xFD	; 253
	return ;

    for ( s = VP( &usbStringDescSer ) ; i-- ; ++s, ++d )
	eeprom_write_byte( d, pgm_read_byte( s ) ) ;
     4ce:	64 91       	lpm	r22, Z
     4d0:	ce 01       	movw	r24, r28
     4d2:	0e 94 2d 08 	call	0x105a	; 0x105a <__eewr_byte_usb1286>
    i = USB_STRING_DESC_SER_SZ ;

    if ( eeprom_read_byte( d ) == i )
	return ;

    for ( s = VP( &usbStringDescSer ) ; i-- ; ++s, ++d )
     4d6:	21 96       	adiw	r28, 0x01	; 1
     4d8:	ca 30       	cpi	r28, 0x0A	; 10
     4da:	d1 05       	cpc	r29, r1
     4dc:	a9 f7       	brne	.-22     	; 0x4c8 <usb_init+0x40>
     4de:	dc cf       	rjmp	.-72     	; 0x498 <usb_init+0x10>

000004e0 <usb_configured>:
    uint8_t
	f ;

    CRITICAL_VAR() ;

    ENTER_CRITICAL() ;
     4e0:	9f b7       	in	r25, 0x3f	; 63
     4e2:	f8 94       	cli

    f = (usb_configuration && ! usb_suspend) ;
     4e4:	80 91 5a 01 	lds	r24, 0x015A
     4e8:	88 23       	and	r24, r24
     4ea:	21 f0       	breq	.+8      	; 0x4f4 <usb_configured+0x14>
     4ec:	20 91 5b 01 	lds	r18, 0x015B
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	21 11       	cpse	r18, r1
     4f4:	80 e0       	ldi	r24, 0x00	; 0

    EXIT_CRITICAL_RET( f ) ;
     4f6:	9f bf       	out	0x3f, r25	; 63
}
     4f8:	08 95       	ret

000004fa <usb_IN_busy>:
    uint8_t
	f ;

    CRITICAL_VAR() ;

    ENTER_CRITICAL() ;
     4fa:	9f b7       	in	r25, 0x3f	; 63
     4fc:	f8 94       	cli

    if ( ! usb_configuration || usb_suspend )
     4fe:	80 91 5a 01 	lds	r24, 0x015A
     502:	88 23       	and	r24, r24
     504:	21 f0       	breq	.+8      	; 0x50e <usb_IN_busy+0x14>
     506:	80 91 5b 01 	lds	r24, 0x015B
     50a:	88 23       	and	r24, r24
     50c:	19 f0       	breq	.+6      	; 0x514 <usb_IN_busy+0x1a>
	EXIT_CRITICAL_RET( FALSE ) ;	// Pipe closed
     50e:	9f bf       	out	0x3f, r25	; 63
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	08 95       	ret

    UENUM = EP_HID ;			// select EP
     514:	84 e0       	ldi	r24, 0x04	; 4
     516:	80 93 e9 00 	sts	0x00E9, r24

    f = bit_is_clear( UEINTX, RWAL ) ;
     51a:	80 91 e8 00 	lds	r24, 0x00E8
     51e:	85 fb       	bst	r24, 5
     520:	88 27       	eor	r24, r24
     522:	80 f9       	bld	r24, 0

    EXIT_CRITICAL_RET( f ) ;
     524:	9f bf       	out	0x3f, r25	; 63
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	89 27       	eor	r24, r25
}
     52a:	08 95       	ret

0000052c <usb_send_IN>:

uint8_t usb_send_IN ( uint8_t *data, uint8_t len )
{
    CRITICAL_VAR() ;

    ENTER_CRITICAL() ;
     52c:	2f b7       	in	r18, 0x3f	; 63
     52e:	f8 94       	cli

    if ( ! usb_configuration || usb_suspend )
     530:	30 91 5a 01 	lds	r19, 0x015A
     534:	33 23       	and	r19, r19
     536:	21 f0       	breq	.+8      	; 0x540 <usb_send_IN+0x14>
     538:	30 91 5b 01 	lds	r19, 0x015B
     53c:	33 23       	and	r19, r19
     53e:	19 f0       	breq	.+6      	; 0x546 <usb_send_IN+0x1a>
	EXIT_CRITICAL_RET( FALSE ) ;	// Pipe closed
     540:	2f bf       	out	0x3f, r18	; 63
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	08 95       	ret

    UENUM = EP_HID ;
     546:	34 e0       	ldi	r19, 0x04	; 4
     548:	30 93 e9 00 	sts	0x00E9, r19
     54c:	fc 01       	movw	r30, r24

	UENUM = EP_HID ;
    }
#endif

    for ( ; len-- ; )			// Write data to FIFO
     54e:	61 50       	subi	r22, 0x01	; 1
     550:	20 f0       	brcs	.+8      	; 0x55a <usb_send_IN+0x2e>
	UEDATX = *data++ ;
     552:	81 91       	ld	r24, Z+
     554:	80 93 f1 00 	sts	0x00F1, r24
     558:	fa cf       	rjmp	.-12     	; 0x54e <usb_send_IN+0x22>

    UEINTX =
     55a:	8a e1       	ldi	r24, 0x1A	; 26
     55c:	80 93 e8 00 	sts	0x00E8, r24
	| _B1(RXSTPI)			// no effect on the bit
	| _B0(RXOUTI)			// no effect on the bit
	| _B1(STALLEDI)			// no effect on the bit
	| _B0(TXINI) ;			// clear TX ready int flag

    EXIT_CRITICAL_RET( TRUE ) ;
     560:	2f bf       	out	0x3f, r18	; 63
     562:	81 e0       	ldi	r24, 0x01	; 1
}
     564:	08 95       	ret

00000566 <__vector_10>:
//******************************************************************************

// USB Device Interrupt

ISR( USB_GEN_vect )
{
     566:	1f 92       	push	r1
     568:	0f 92       	push	r0
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	0f 92       	push	r0
     56e:	11 24       	eor	r1, r1
     570:	8f 93       	push	r24
     572:	9f 93       	push	r25
    uint8_t
	intbits ;

    intbits = UDINT ;
     574:	80 91 e1 00 	lds	r24, 0x00E1
    UDINT   = 0 ;
     578:	10 92 e1 00 	sts	0x00E1, r1

    if ( intbits & _BV( EORSTI ) )	// USB reset
     57c:	83 ff       	sbrs	r24, 3
     57e:	10 c0       	rjmp	.+32     	; 0x5a0 <__vector_10+0x3a>
    {
	UENUM   = 0 ;
     580:	10 92 e9 00 	sts	0x00E9, r1
	UECONX  = 1 ;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 eb 00 	sts	0x00EB, r24
	UECFG0X = EP_TYPE_CONTROL ;
     58a:	10 92 ec 00 	sts	0x00EC, r1
	UECFG1X = EP_SIZE( ENDPOINT0_SIZE ) | EP_SINGLE_BUFFER ;
     58e:	82 e3       	ldi	r24, 0x32	; 50
     590:	80 93 ed 00 	sts	0x00ED, r24
	UEIENX  = _BV( RXSTPE ) ;
     594:	88 e0       	ldi	r24, 0x08	; 8
     596:	80 93 f0 00 	sts	0x00F0, r24

	usb_configuration = 0 ;
     59a:	10 92 5a 01 	sts	0x015A, r1
     59e:	3a c0       	rjmp	.+116    	; 0x614 <__vector_10+0xae>
	usb_suspend = FALSE ;

	return ;
    }

    if ( usb_configuration )
     5a0:	90 91 5a 01 	lds	r25, 0x015A
     5a4:	99 23       	and	r25, r25
     5a6:	c1 f1       	breq	.+112    	; 0x618 <__vector_10+0xb2>
    {
	if ( (intbits & _BV(SUSPI)) && bit_is_set( UDIEN, SUSPE ) )
     5a8:	80 ff       	sbrs	r24, 0
     5aa:	19 c0       	rjmp	.+50     	; 0x5de <__vector_10+0x78>
     5ac:	90 91 e2 00 	lds	r25, 0x00E2
     5b0:	90 ff       	sbrs	r25, 0
     5b2:	15 c0       	rjmp	.+42     	; 0x5de <__vector_10+0x78>
	{
	    // Enter suspend

	    clr_bit( UDIEN, SUSPE ) ;		// Disable suspend IRQ
     5b4:	90 91 e2 00 	lds	r25, 0x00E2
     5b8:	9e 7f       	andi	r25, 0xFE	; 254
     5ba:	90 93 e2 00 	sts	0x00E2, r25
	    set_bit( UDIEN, WAKEUPE ) ;		// Enable wakeup IRQ
     5be:	90 91 e2 00 	lds	r25, 0x00E2
     5c2:	90 61       	ori	r25, 0x10	; 16
     5c4:	90 93 e2 00 	sts	0x00E2, r25

	    set_bit( USBCON, FRZCLK ) ;		// Stop USB clcok
     5c8:	90 91 d8 00 	lds	r25, 0x00D8
     5cc:	90 62       	ori	r25, 0x20	; 32
     5ce:	90 93 d8 00 	sts	0x00D8, r25
	    clr_bit( PLLCSR, PLLE ) ;		// Stop PLL
     5d2:	99 b5       	in	r25, 0x29	; 41
     5d4:	9d 7f       	andi	r25, 0xFD	; 253
     5d6:	99 bd       	out	0x29, r25	; 41

	    usb_suspend = TRUE ;
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	90 93 5b 01 	sts	0x015B, r25
	}

	if ( (intbits & _BV(WAKEUPI)) && bit_is_set( UDIEN, WAKEUPE ) )
     5de:	84 ff       	sbrs	r24, 4
     5e0:	1b c0       	rjmp	.+54     	; 0x618 <__vector_10+0xb2>
     5e2:	80 91 e2 00 	lds	r24, 0x00E2
     5e6:	84 ff       	sbrs	r24, 4
     5e8:	17 c0       	rjmp	.+46     	; 0x618 <__vector_10+0xb2>
	{
	    // Exit suspend

	    for ( set_bit( PLLCSR, PLLE ) ; bit_is_clear( PLLCSR, PLOCK ) ; )
     5ea:	89 b5       	in	r24, 0x29	; 41
     5ec:	82 60       	ori	r24, 0x02	; 2
     5ee:	89 bd       	out	0x29, r24	; 41
     5f0:	09 b4       	in	r0, 0x29	; 41
     5f2:	00 fe       	sbrs	r0, 0
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <__vector_10+0x8a>
		;				// Start PLL

	    clr_bit( USBCON, FRZCLK ) ;		// Enable USB clock
     5f6:	80 91 d8 00 	lds	r24, 0x00D8
     5fa:	8f 7d       	andi	r24, 0xDF	; 223
     5fc:	80 93 d8 00 	sts	0x00D8, r24

	    set_bit( UDIEN, SUSPE ) ;		// Enable suspend IRQ
     600:	80 91 e2 00 	lds	r24, 0x00E2
     604:	81 60       	ori	r24, 0x01	; 1
     606:	80 93 e2 00 	sts	0x00E2, r24
	    clr_bit( UDIEN, WAKEUPE ) ;		// Disable wakeup IRQ
     60a:	80 91 e2 00 	lds	r24, 0x00E2
     60e:	8f 7e       	andi	r24, 0xEF	; 239
     610:	80 93 e2 00 	sts	0x00E2, r24

	    usb_suspend = FALSE ;
     614:	10 92 5b 01 	sts	0x015B, r1
//	if ( intbits & _BV( SOFI ) )
//	{
//
//	}
    }
}
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	0f 90       	pop	r0
     61e:	0f be       	out	0x3f, r0	; 63
     620:	0f 90       	pop	r0
     622:	1f 90       	pop	r1
     624:	18 95       	reti

00000626 <__vector_11>:
//------------------------------------------------------------------------------

// USB Endpoint Interrupt - endpoint 0 is handled here.

ISR( USB_COM_vect )
{
     626:	1f 92       	push	r1
     628:	0f 92       	push	r0
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	0f 92       	push	r0
     62e:	11 24       	eor	r1, r1
     630:	0b b6       	in	r0, 0x3b	; 59
     632:	0f 92       	push	r0
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	2f 93       	push	r18
     63a:	3f 93       	push	r19
     63c:	4f 93       	push	r20
     63e:	5f 93       	push	r21
     640:	6f 93       	push	r22
     642:	7f 93       	push	r23
     644:	8f 93       	push	r24
     646:	9f 93       	push	r25
     648:	af 93       	push	r26
     64a:	bf 93       	push	r27
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ef 93       	push	r30
     652:	ff 93       	push	r31
    uint8_t
	bmRequestType, bRequest,
	i, n,
	*p ;

    UENUM = 0 ;				// Select EP0
     654:	10 92 e9 00 	sts	0x00E9, r1

    i = UEINTX ;
     658:	80 91 e8 00 	lds	r24, 0x00E8

    if ( i & _BV( RXSTPI ) )
     65c:	83 ff       	sbrs	r24, 3
     65e:	0a c1       	rjmp	.+532    	; 0x874 <__vector_11+0x24e>
    {
	bmRequestType = UEDATX ;
     660:	30 91 f1 00 	lds	r19, 0x00F1
	bRequest      = UEDATX ;
     664:	20 91 f1 00 	lds	r18, 0x00F1

	wValue   =  UEDATX ;
     668:	c0 91 f1 00 	lds	r28, 0x00F1
	wValue  |= (UEDATX << 8) ;
     66c:	80 91 f1 00 	lds	r24, 0x00F1
     670:	d0 e0       	ldi	r29, 0x00	; 0
     672:	d8 2b       	or	r29, r24

	wIndex   =  UEDATX ;
     674:	80 91 f1 00 	lds	r24, 0x00F1
	wIndex  |= (UEDATX << 8) ;
     678:	40 91 f1 00 	lds	r20, 0x00F1

	wLength  =  UEDATX ;
     67c:	00 91 f1 00 	lds	r16, 0x00F1
	wLength |= (UEDATX << 8) ;
     680:	10 91 f1 00 	lds	r17, 0x00F1

	UEINTX = ~(_BV( RXSTPI ) | _BV( RXOUTI ) | _BV( TXINI )) ;
     684:	42 ef       	ldi	r20, 0xF2	; 242
     686:	40 93 e8 00 	sts	0x00E8, r20

	if ( bRequest == GET_DESCRIPTOR )
     68a:	26 30       	cpi	r18, 0x06	; 6
     68c:	09 f0       	breq	.+2      	; 0x690 <__vector_11+0x6a>
     68e:	39 c0       	rjmp	.+114    	; 0x702 <__vector_11+0xdc>
	{
	    if ( ! (p = lookup( wValue, M_IF_C(wIndex) str_descriptors, ARRSZ( str_descriptors ) )) )
     690:	46 e0       	ldi	r20, 0x06	; 6
     692:	60 ee       	ldi	r22, 0xE0	; 224
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	ce 01       	movw	r24, r28
     698:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lookup>
     69c:	00 97       	sbiw	r24, 0x00	; 0
     69e:	d1 f4       	brne	.+52     	; 0x6d4 <__vector_11+0xae>
	    {
		if ( sw_id == SW_ID_3DP )
     6a0:	80 91 63 01 	lds	r24, 0x0163
     6a4:	81 30       	cpi	r24, 0x01	; 1
     6a6:	21 f4       	brne	.+8      	; 0x6b0 <__vector_11+0x8a>
		    p = lookup( wValue, M_IF_C(wIndex) cfg_descriptors_3DP, ARRSZ( cfg_descriptors_3DP ) ) ;
     6a8:	44 e0       	ldi	r20, 0x04	; 4
     6aa:	68 ec       	ldi	r22, 0xC8	; 200
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <__vector_11+0xa2>
		else
		if ( sw_id == SW_ID_PP )
     6b0:	82 30       	cpi	r24, 0x02	; 2
     6b2:	21 f4       	brne	.+8      	; 0x6bc <__vector_11+0x96>
		    p = lookup( wValue, M_IF_C(wIndex) cfg_descriptors_PP,  ARRSZ( cfg_descriptors_PP ) ) ;
     6b4:	44 e0       	ldi	r20, 0x04	; 4
     6b6:	60 eb       	ldi	r22, 0xB0	; 176
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	06 c0       	rjmp	.+12     	; 0x6c8 <__vector_11+0xa2>
		else
		if ( sw_id == SW_ID_FFP )
     6bc:	83 30       	cpi	r24, 0x03	; 3
     6be:	09 f0       	breq	.+2      	; 0x6c2 <__vector_11+0x9c>
     6c0:	d9 c0       	rjmp	.+434    	; 0x874 <__vector_11+0x24e>
		    p = lookup( wValue, M_IF_C(wIndex) cfg_descriptors_FFP, ARRSZ( cfg_descriptors_FFP ) ) ;
     6c2:	44 e0       	ldi	r20, 0x04	; 4
     6c4:	68 e9       	ldi	r22, 0x98	; 152
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	ce 01       	movw	r24, r28
     6ca:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <lookup>

		if ( ! p )
     6ce:	00 97       	sbiw	r24, 0x00	; 0
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <__vector_11+0xae>
     6d2:	d0 c0       	rjmp	.+416    	; 0x874 <__vector_11+0x24e>

	wIndex   =  UEDATX ;
	wIndex  |= (UEDATX << 8) ;

	wLength  =  UEDATX ;
	wLength |= (UEDATX << 8) ;
     6d4:	60 2f       	mov	r22, r16
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	71 2b       	or	r23, r17

	    usb_send_EP0( p, wLength, n ) ;
	  #else
	    // Get length and start address

	    n = pgm_read_byte( &((descriptor_list_t *)p)->length ) ;
     6da:	fc 01       	movw	r30, r24
     6dc:	35 96       	adiw	r30, 0x05	; 5
     6de:	54 91       	lpm	r21, Z

	    // Note: code limits max. descriptor size to 255

	    if ( wLength & 0xFF00 )
     6e0:	9b 01       	movw	r18, r22
     6e2:	22 27       	eor	r18, r18
     6e4:	23 2b       	or	r18, r19
     6e6:	09 f0       	breq	.+2      	; 0x6ea <__vector_11+0xc4>
		i = 255 ;
     6e8:	6f ef       	ldi	r22, 0xFF	; 255
		i = wLength ;

	    if ( i > n )
		i = n ;

	    n = pgm_read_byte( &((descriptor_list_t *)p)->where ) ;
     6ea:	fc 01       	movw	r30, r24
     6ec:	34 96       	adiw	r30, 0x04	; 4
     6ee:	44 91       	lpm	r20, Z

	    p = VP( pgm_read_word( &((descriptor_list_t *)p)->addr ) ) ;
     6f0:	02 96       	adiw	r24, 0x02	; 2
     6f2:	fc 01       	movw	r30, r24
     6f4:	85 91       	lpm	r24, Z+
     6f6:	94 91       	lpm	r25, Z
     6f8:	56 17       	cp	r21, r22
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <__vector_11+0xd8>
     6fc:	91 c0       	rjmp	.+290    	; 0x820 <__vector_11+0x1fa>
     6fe:	65 2f       	mov	r22, r21
     700:	8f c0       	rjmp	.+286    	; 0x820 <__vector_11+0x1fa>
	  #endif

	    return ;
	}

	if ( bRequest == SET_ADDRESS )
     702:	25 30       	cpi	r18, 0x05	; 5
     704:	59 f4       	brne	.+22     	; 0x71c <__vector_11+0xf6>

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     706:	8e ef       	ldi	r24, 0xFE	; 254
     708:	80 93 e8 00 	sts	0x00E8, r24

// Wait until packet TX

static inline void usb_wait_in_ready ( void )
{
    for ( ; bit_is_clear( UEINTX, TXINI ) ; )
     70c:	80 91 e8 00 	lds	r24, 0x00E8
     710:	80 ff       	sbrs	r24, 0
     712:	fc cf       	rjmp	.-8      	; 0x70c <__vector_11+0xe6>
	if ( bRequest == SET_ADDRESS )
	{
	    usb_send_in() ;			// Ack via ZLP
	    usb_wait_in_ready() ;		// Wait until ZLP sent

	    UDADDR = wValue | _BV( ADDEN ) ;	// Set & enable USB address
     714:	c0 68       	ori	r28, 0x80	; 128
     716:	c0 93 e3 00 	sts	0x00E3, r28

	    return ;
     71a:	af c0       	rjmp	.+350    	; 0x87a <__vector_11+0x254>
	}

	if ( bRequest == SET_CONFIGURATION && bmRequestType == 0 )
     71c:	29 30       	cpi	r18, 0x09	; 9
     71e:	49 f5       	brne	.+82     	; 0x772 <__vector_11+0x14c>
     720:	31 11       	cpse	r19, r1
     722:	48 c0       	rjmp	.+144    	; 0x7b4 <__vector_11+0x18e>

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     724:	8e ef       	ldi	r24, 0xFE	; 254
     726:	80 93 e8 00 	sts	0x00E8, r24

	if ( bRequest == SET_CONFIGURATION && bmRequestType == 0 )
	{
	    usb_send_in() ;			// Ack via ZLP

	    usb_configuration = wValue ;	// Remember configuration
     72a:	c0 93 5a 01 	sts	0x015A, r28

	    p = VP( endpoint_config_table ) ;
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	91 e0       	ldi	r25, 0x01	; 1

	    for ( i = 1 ; i <= MAX_ENDPOINT ; ++i )
     732:	41 e0       	ldi	r20, 0x01	; 1
	    {
		UENUM = i ;			// Select EP
     734:	40 93 e9 00 	sts	0x00E9, r20

		n = pgm_read_byte( p++ ) ;
     738:	9c 01       	movw	r18, r24
     73a:	2f 5f       	subi	r18, 0xFF	; 255
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	fc 01       	movw	r30, r24
     740:	54 91       	lpm	r21, Z

		UECONX = n ;
     742:	50 93 eb 00 	sts	0x00EB, r21

		if ( n )			// If enabled,
     746:	55 23       	and	r21, r21
     748:	59 f0       	breq	.+22     	; 0x760 <__vector_11+0x13a>
		{				// configure EP
		    UECFG0X = pgm_read_byte( p++ ) ;
     74a:	f9 01       	movw	r30, r18
     74c:	24 91       	lpm	r18, Z
     74e:	20 93 ec 00 	sts	0x00EC, r18
		    UECFG1X = pgm_read_byte( p++ ) ;
     752:	9c 01       	movw	r18, r24
     754:	2d 5f       	subi	r18, 0xFD	; 253
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	31 96       	adiw	r30, 0x01	; 1
     75a:	84 91       	lpm	r24, Z
     75c:	80 93 ed 00 	sts	0x00ED, r24

	    usb_configuration = wValue ;	// Remember configuration

	    p = VP( endpoint_config_table ) ;

	    for ( i = 1 ; i <= MAX_ENDPOINT ; ++i )
     760:	4f 5f       	subi	r20, 0xFF	; 255
     762:	47 30       	cpi	r20, 0x07	; 7
     764:	11 f0       	breq	.+4      	; 0x76a <__vector_11+0x144>
     766:	c9 01       	movw	r24, r18
     768:	e5 cf       	rjmp	.-54     	; 0x734 <__vector_11+0x10e>
		}
	    }

	    // Reset EP FIFOs

	    UERST =
     76a:	8e e7       	ldi	r24, 0x7E	; 126
     76c:	80 93 ea 00 	sts	0x00EA, r24
     770:	42 c0       	rjmp	.+132    	; 0x7f6 <__vector_11+0x1d0>
	    UERST = 0 ;

	    return ;
	}

	if ( bRequest == GET_CONFIGURATION && bmRequestType == 0x80 )
     772:	28 30       	cpi	r18, 0x08	; 8
     774:	41 f4       	brne	.+16     	; 0x786 <__vector_11+0x160>
     776:	30 38       	cpi	r19, 0x80	; 128
     778:	09 f0       	breq	.+2      	; 0x77c <__vector_11+0x156>
     77a:	7c c0       	rjmp	.+248    	; 0x874 <__vector_11+0x24e>
	{
	    UEDATX = usb_configuration ;
     77c:	80 91 5a 01 	lds	r24, 0x015A
     780:	80 93 f1 00 	sts	0x00F1, r24
     784:	13 c0       	rjmp	.+38     	; 0x7ac <__vector_11+0x186>
	    usb_send_in() ;

	    return ;
	}

	if ( bRequest == GET_STATUS )
     786:	21 11       	cpse	r18, r1
     788:	15 c0       	rjmp	.+42     	; 0x7b4 <__vector_11+0x18e>
	{
	  #if SUPPORT_ENDPOINT_HALT
	    i = 0 ;

	    if ( bmRequestType == 0x82 )
     78a:	32 38       	cpi	r19, 0x82	; 130
     78c:	51 f4       	brne	.+20     	; 0x7a2 <__vector_11+0x17c>
	    {
		UENUM = wIndex ;
     78e:	80 93 e9 00 	sts	0x00E9, r24

		if ( bit_is_set( UECONX, STALLRQ ) )
     792:	80 91 eb 00 	lds	r24, 0x00EB
     796:	85 fb       	bst	r24, 5
     798:	88 27       	eor	r24, r24
     79a:	80 f9       	bld	r24, 0
		    i = 1 ;

		UENUM = 0;
     79c:	10 92 e9 00 	sts	0x00E9, r1
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <__vector_11+0x17e>
	}

	if ( bRequest == GET_STATUS )
	{
	  #if SUPPORT_ENDPOINT_HALT
	    i = 0 ;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
		    i = 1 ;

		UENUM = 0;
	    }

	    UEDATX = i ;
     7a4:	80 93 f1 00 	sts	0x00F1, r24
	  #else
	    UEDATX = 0 ;
	  #endif

	    UEDATX = 0 ;
     7a8:	10 92 f1 00 	sts	0x00F1, r1

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     7ac:	8e ef       	ldi	r24, 0xFE	; 254
     7ae:	80 93 e8 00 	sts	0x00E8, r24
     7b2:	63 c0       	rjmp	.+198    	; 0x87a <__vector_11+0x254>
	    return ;
	}

      #if SUPPORT_ENDPOINT_HALT

	if (   (bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
     7b4:	42 2f       	mov	r20, r18
     7b6:	4d 7f       	andi	r20, 0xFD	; 253
     7b8:	41 30       	cpi	r20, 0x01	; 1
     7ba:	51 f5       	brne	.+84     	; 0x810 <__vector_11+0x1ea>
	     && bmRequestType == 0x02
     7bc:	32 30       	cpi	r19, 0x02	; 2
     7be:	f1 f4       	brne	.+60     	; 0x7fc <__vector_11+0x1d6>
	     && wValue == 0 )
     7c0:	20 97       	sbiw	r28, 0x00	; 0
     7c2:	89 f5       	brne	.+98     	; 0x826 <__vector_11+0x200>
	{
	    n = wIndex & 0x7F ;
     7c4:	8f 77       	andi	r24, 0x7F	; 127

	    if ( n >= 1 && n <= MAX_ENDPOINT )
     7c6:	9f ef       	ldi	r25, 0xFF	; 255
     7c8:	98 0f       	add	r25, r24
     7ca:	96 30       	cpi	r25, 0x06	; 6
     7cc:	60 f5       	brcc	.+88     	; 0x826 <__vector_11+0x200>

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     7ce:	9e ef       	ldi	r25, 0xFE	; 254
     7d0:	90 93 e8 00 	sts	0x00E8, r25

	    if ( n >= 1 && n <= MAX_ENDPOINT )
	    {
		usb_send_in() ;			// Ack via ZLP

		UENUM = n ;
     7d4:	80 93 e9 00 	sts	0x00E9, r24

		if ( bRequest == SET_FEATURE )
     7d8:	23 30       	cpi	r18, 0x03	; 3
     7da:	09 f4       	brne	.+2      	; 0x7de <__vector_11+0x1b8>
     7dc:	4b c0       	rjmp	.+150    	; 0x874 <__vector_11+0x24e>
		    UECONX = _B1(STALLRQ) | _B1(EPEN) ;
		else
		{
		    UECONX = _B1(STALLRQC) | _B1(RSTDT) | _B1(EPEN) ;
     7de:	99 e1       	ldi	r25, 0x19	; 25
     7e0:	90 93 eb 00 	sts	0x00EB, r25
		    UERST  = _B1(n) ;
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	08 2e       	mov	r0, r24
     7ea:	01 c0       	rjmp	.+2      	; 0x7ee <__vector_11+0x1c8>
     7ec:	22 0f       	add	r18, r18
     7ee:	0a 94       	dec	r0
     7f0:	ea f7       	brpl	.-6      	; 0x7ec <__vector_11+0x1c6>
     7f2:	20 93 ea 00 	sts	0x00EA, r18
		    UERST  = 0 ;
     7f6:	10 92 ea 00 	sts	0x00EA, r1
     7fa:	3f c0       	rjmp	.+126    	; 0x87a <__vector_11+0x254>
		return ;
	    }
	}
      #endif

	if ( bRequest == HID_GET_REPORT && bmRequestType == 0xA1 )
     7fc:	21 30       	cpi	r18, 0x01	; 1
     7fe:	41 f4       	brne	.+16     	; 0x810 <__vector_11+0x1ea>
     800:	31 3a       	cpi	r19, 0xA1	; 161
     802:	c1 f5       	brne	.+112    	; 0x874 <__vector_11+0x24e>
	{
	    // wValue contains report type (h) and id (l), see HID 1,11, 7.2.1
	    // type shoud be "input" (3), id should be 0 or 1/2
	    // wLength should match sizeof( hid_report )

	    usb_send_EP0( VP( sw_report ), sw_reportsz, IN_RAM ) ;
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	60 91 64 01 	lds	r22, 0x0164
     80a:	8c e5       	ldi	r24, 0x5C	; 92
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	08 c0       	rjmp	.+16     	; 0x820 <__vector_11+0x1fa>

	    return ;
	}

	if ( bRequest == HID_GET_IDLE && bmRequestType == 0xA1 )
     810:	22 30       	cpi	r18, 0x02	; 2
     812:	69 f4       	brne	.+26     	; 0x82e <__vector_11+0x208>
     814:	31 3a       	cpi	r19, 0xA1	; 161
     816:	71 f5       	brne	.+92     	; 0x874 <__vector_11+0x24e>
	{
	    // LSB(wValue): report ID
	    // wIndex: interface

	    usb_send_EP0( VP( &idle_rate ), sizeof( idle_rate ), IN_RAM ) ;
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	61 e0       	ldi	r22, 0x01	; 1
     81c:	8d e6       	ldi	r24, 0x6D	; 109
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <usb_send_EP0>

	    return ;
     824:	2a c0       	rjmp	.+84     	; 0x87a <__vector_11+0x254>
		return ;
	    }
	}
      #endif

	if ( bRequest == HID_GET_REPORT && bmRequestType == 0xA1 )
     826:	21 30       	cpi	r18, 0x01	; 1
     828:	29 f1       	breq	.+74     	; 0x874 <__vector_11+0x24e>
	    usb_send_EP0( VP( sw_report ), sw_reportsz, IN_RAM ) ;

	    return ;
	}

	if ( bRequest == HID_GET_IDLE && bmRequestType == 0xA1 )
     82a:	22 30       	cpi	r18, 0x02	; 2
     82c:	19 f1       	breq	.+70     	; 0x874 <__vector_11+0x24e>
	    usb_send_EP0( VP( &idle_rate ), sizeof( idle_rate ), IN_RAM ) ;

	    return ;
	}

	if ( bRequest == HID_SET_IDLE && bmRequestType == 0x21 )
     82e:	2a 30       	cpi	r18, 0x0A	; 10
     830:	09 f5       	brne	.+66     	; 0x874 <__vector_11+0x24e>
     832:	31 32       	cpi	r19, 0x21	; 33
     834:	f9 f4       	brne	.+62     	; 0x874 <__vector_11+0x24e>

// Trigger TX

static inline void usb_send_in ( void )	
{
    UEINTX = ~_BV( TXINI ) ;
     836:	8e ef       	ldi	r24, 0xFE	; 254
     838:	80 93 e8 00 	sts	0x00E8, r24

	    // MSB(wValue): duration in 4ms clicks, 0 for indefinite
	    // LSB(wValue): report ID
	    // wIndex: interface

	    i = MSB( wValue ) ;
     83c:	cd 2f       	mov	r28, r29
     83e:	dd 27       	eor	r29, r29

	    if ( ! i )				// Indefinite
     840:	20 97       	sbiw	r28, 0x00	; 0
     842:	19 f4       	brne	.+6      	; 0x84a <__vector_11+0x224>
		idle_cnt = 0 ;
     844:	10 92 65 01 	sts	0x0165, r1
     848:	12 c0       	rjmp	.+36     	; 0x86e <__vector_11+0x248>
	    else
	    {
		if ( ! idle_rate || (idle_rate - idle_cnt) >= i )
     84a:	80 91 6d 01 	lds	r24, 0x016D
     84e:	88 23       	and	r24, r24
     850:	41 f0       	breq	.+16     	; 0x862 <__vector_11+0x23c>
     852:	20 91 65 01 	lds	r18, 0x0165
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	82 1b       	sub	r24, r18
     85a:	91 09       	sbc	r25, r1
     85c:	8c 17       	cp	r24, r28
     85e:	9d 07       	cpc	r25, r29
     860:	14 f0       	brlt	.+4      	; 0x866 <__vector_11+0x240>
		    idle_cnt = 1 ;		// Was indefinite or new idle expired
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	02 c0       	rjmp	.+4      	; 0x86a <__vector_11+0x244>
		else
		    idle_cnt = i - idle_cnt ;	// Correct counter to new idle time
     866:	8c 2f       	mov	r24, r28
     868:	82 1b       	sub	r24, r18
     86a:	80 93 65 01 	sts	0x0165, r24
	    }

	    idle_rate = i ;
     86e:	c0 93 6d 01 	sts	0x016D, r28

	    return ;
     872:	03 c0       	rjmp	.+6      	; 0x87a <__vector_11+0x254>
	}
    }

    UECONX = _BV( STALLRQ ) | _BV( EPEN ) ;	// stall
     874:	81 e2       	ldi	r24, 0x21	; 33
     876:	80 93 eb 00 	sts	0x00EB, r24
}
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	bf 91       	pop	r27
     884:	af 91       	pop	r26
     886:	9f 91       	pop	r25
     888:	8f 91       	pop	r24
     88a:	7f 91       	pop	r23
     88c:	6f 91       	pop	r22
     88e:	5f 91       	pop	r21
     890:	4f 91       	pop	r20
     892:	3f 91       	pop	r19
     894:	2f 91       	pop	r18
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	0f 90       	pop	r0
     89c:	0b be       	out	0x3b, r0	; 59
     89e:	0f 90       	pop	r0
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	0f 90       	pop	r0
     8a4:	1f 90       	pop	r1
     8a6:	18 95       	reti

000008a8 <Delay_1024>:

// Delay using T1 as timing reference, assuming prescaler /1024

static void FA_NOINLINE(Delay_1024)(uint16_t time)
{
	set_bit(GTCCR, PSRSYNC); // reset prescaler
     8a8:	23 b5       	in	r18, 0x23	; 35
     8aa:	21 60       	ori	r18, 0x01	; 1
     8ac:	23 bd       	out	0x23, r18	; 35

	ResetTM(1, time); // set timer
     8ae:	90 93 85 00 	sts	0x0085, r25
     8b2:	80 93 84 00 	sts	0x0084, r24
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	86 bb       	out	0x16, r24	; 22

	for (; !TMexp(1);) // wait until timer expired
     8ba:	b0 9b       	sbis	0x16, 0	; 22
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <Delay_1024+0x12>
		;
}
     8be:	08 95       	ret

000008c0 <Delay_64>:

// Delay using T0 as timing reference, assuming prescaler /64

static void FA_NOINLINE(Delay_64)(uint8_t time)
{
	set_bit(GTCCR, PSRSYNC); // reset prescaler
     8c0:	93 b5       	in	r25, 0x23	; 35
     8c2:	91 60       	ori	r25, 0x01	; 1
     8c4:	93 bd       	out	0x23, r25	; 35

	ResetTM(0, time); // set timer
     8c6:	86 bd       	out	0x26, r24	; 38
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	85 bb       	out	0x15, r24	; 21

	for (; !TMexp(0);) // wait until timer expired
     8cc:	a8 9b       	sbis	0x15, 0	; 21
     8ce:	fe cf       	rjmp	.-4      	; 0x8cc <Delay_64+0xc>
		;
}
     8d0:	08 95       	ret

000008d2 <Trigger>:

// Trigger the stick

static void FA_NOINLINE(Trigger)(void)
{
	TRG_pull();
     8d2:	24 98       	cbi	0x04, 4	; 4
     8d4:	25 98       	cbi	0x04, 5	; 4
	Delay_64(T6DEL48US); // _delay_us( 47.8125 ) is max @ 16MHz
     8d6:	84 ef       	ldi	r24, 0xF4	; 244
     8d8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Delay_64>
	TRG_rel();
     8dc:	24 9a       	sbi	0x04, 4	; 4
     8de:	25 9a       	sbi	0x04, 5	; 4
     8e0:	08 95       	ret

000008e2 <Flash_LED_12MS>:

// Hang out 12ms w/ the LED on for the initial 4ms

static void FA_NOINLINE(Flash_LED_12MS)(void)
{
	LED_on();
     8e2:	5e 9a       	sbi	0x0b, 6	; 11
	Delay_1024(T0DEL4MS);
     8e4:	81 ec       	ldi	r24, 0xC1	; 193
     8e6:	9f ef       	ldi	r25, 0xFF	; 255
     8e8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>
	LED_off();
     8ec:	5e 98       	cbi	0x0b, 6	; 11
	Delay_1024(T0DEL8MS);
     8ee:	83 e8       	ldi	r24, 0x83	; 131
     8f0:	9f ef       	ldi	r25, 0xFF	; 255
     8f2:	0c 94 54 04 	jmp	0x8a8	; 0x8a8 <Delay_1024>

000008f6 <patchbutt>:
// Patch current 3DP buttons into report

static void patchbutt(void)
{
	uint8_t
		b = sw_buttons;
     8f6:	80 91 01 01 	lds	r24, 0x0101

	sw_report[5] = (sw_report[5] & 0x1F) | (b & 0xE0);
	sw_report[6] = (sw_report[6] & 0xFE) | (b & 0x01);
#else

	__asm__ __volatile__(
     8fa:	80 95       	com	r24
     8fc:	88 0f       	add	r24, r24
     8fe:	8e 71       	andi	r24, 0x1E	; 30
		: "0"(b)
		: "cc");

	// Patch buttons into report data

	sw_report[4] = (sw_report[4] & 0xE1) | b;
     900:	e0 e6       	ldi	r30, 0x60	; 96
     902:	f1 e0       	ldi	r31, 0x01	; 1
     904:	90 81       	ld	r25, Z
     906:	91 7e       	andi	r25, 0xE1	; 225
     908:	89 2b       	or	r24, r25
     90a:	80 83       	st	Z, r24
     90c:	08 95       	ret

0000090e <Check3DPPkt.constprop.0>:
//------------------------------------------------------------------------------

// Check if the 3DPro data packet at *pkt is valid by adding all nibbles
// (result must be 0) and checking the N bits of each byte.

static uint8_t FA_NOINLINE(Check3DPPkt)(uint8_t *pkt)
     90e:	ef e4       	ldi	r30, 0x4F	; 79
     910:	f1 e0       	ldi	r31, 0x01	; 1
{
	uint8_t
		b,
		i = 8,	 // 8 bytes
		sum = 0; // clear CHKSUM
     912:	90 e0       	ldi	r25, 0x00	; 0

	do // for every byte
	{
		b = *pkt++;
     914:	21 91       	ld	r18, Z+
		//	     && i != 1 )			// Not last byte ?
		//	    return ( 0 ) ;			// bad packet

		sum += b; // add LSN

		__asm__ __volatile__(
     916:	82 2f       	mov	r24, r18
     918:	82 95       	swap	r24
		//
		//	if (   (b & 0x80)			// N flag set ?
		//	     && i != 1 )			// Not last byte ?
		//	    return ( 0 ) ;			// bad packet

		sum += b; // add LSN
     91a:	82 0f       	add	r24, r18
		__asm__ __volatile__(
			"swap %0\n\t"
			: "+r"(b)
			: "0"(b));

		sum += b; // add MSN
     91c:	98 0f       	add	r25, r24
	} while (--i);
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	e7 35       	cpi	r30, 0x57	; 87
     922:	f8 07       	cpc	r31, r24
     924:	b9 f7       	brne	.-18     	; 0x914 <Check3DPPkt.constprop.0+0x6>

	return (!(sum & 0x0F)); // good if sum of all nibbs == 0
     926:	9f 70       	andi	r25, 0x0F	; 15
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	09 f0       	breq	.+2      	; 0x92e <Check3DPPkt.constprop.0+0x20>
     92c:	80 e0       	ldi	r24, 0x00	; 0
}
     92e:	08 95       	ret

00000930 <CheckFFPPkt.constprop.1>:
static uint8_t FA_NOINLINE(CheckFFPPkt)(uint8_t *pkt)
{
	uint8_t
		x;

	x = pkt[0] ^ pkt[1] ^ pkt[2] ^ pkt[3] ^ pkt[4] ^ pkt[5];
     930:	e1 e5       	ldi	r30, 0x51	; 81
     932:	f1 e0       	ldi	r31, 0x01	; 1
     934:	81 81       	ldd	r24, Z+1	; 0x01
     936:	90 81       	ld	r25, Z
     938:	89 27       	eor	r24, r25
     93a:	92 81       	ldd	r25, Z+2	; 0x02
     93c:	89 27       	eor	r24, r25
     93e:	93 81       	ldd	r25, Z+3	; 0x03
     940:	89 27       	eor	r24, r25
     942:	94 81       	ldd	r25, Z+4	; 0x04
     944:	89 27       	eor	r24, r25
     946:	95 81       	ldd	r25, Z+5	; 0x05
     948:	89 27       	eor	r24, r25

	x ^= x >> 4;
     94a:	28 2f       	mov	r18, r24
     94c:	22 95       	swap	r18
     94e:	2f 70       	andi	r18, 0x0F	; 15
     950:	28 27       	eor	r18, r24
	x ^= x >> 2;
     952:	92 2f       	mov	r25, r18
     954:	96 95       	lsr	r25
     956:	96 95       	lsr	r25
     958:	92 27       	eor	r25, r18
	x ^= x >> 1;
     95a:	89 2f       	mov	r24, r25
     95c:	86 95       	lsr	r24
     95e:	89 27       	eor	r24, r25

	return (x & 1);
}
     960:	81 70       	andi	r24, 0x01	; 1
     962:	08 95       	ret

00000964 <init_hw>:
//------------------------------------------------------------------------------

// Initialize the hardware

void init_hw(void)
{
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
	// Power down..

	ACSR = _BV(ACD); // analog comp
     96e:	40 e8       	ldi	r20, 0x80	; 128
     970:	40 bf       	out	0x30, r20	; 48
	PRR1 = _BV(PRUSART1); // USART1

#elif defined(__AVR_AT90USBX6__)

	PRR0 = // TWI, Tim2, SPI, ADC
		_BV(PRTWI) | _BV(PRTIM2) | _BV(PRSPI) | _BV(ADC);
     972:	20 91 78 00 	lds	r18, 0x0078
     976:	30 91 79 00 	lds	r19, 0x0079
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	01 c0       	rjmp	.+2      	; 0x982 <init_hw+0x1e>
     980:	88 0f       	add	r24, r24
     982:	2a 95       	dec	r18
     984:	ea f7       	brpl	.-6      	; 0x980 <init_hw+0x1c>
	PRR0 = _BV(PRSPI);	  // SPI
	PRR1 = _BV(PRUSART1); // USART1

#elif defined(__AVR_AT90USBX6__)

	PRR0 = // TWI, Tim2, SPI, ADC
     986:	84 6c       	ori	r24, 0xC4	; 196
     988:	80 93 64 00 	sts	0x0064, r24
		_BV(PRTWI) | _BV(PRTIM2) | _BV(PRSPI) | _BV(ADC);
	PRR1 = _BV(PRTIM3) | _BV(PRUSART1); // Tim3, USART1
     98c:	89 e0       	ldi	r24, 0x09	; 9
     98e:	80 93 65 00 	sts	0x0065, r24

	// Initialize ports

#if defined(__AVR_AT90USBX6__)

	DDRA = DDA;
     992:	11 b8       	out	0x01, r1	; 1
	PORTA = PAPU;
     994:	8f ef       	ldi	r24, 0xFF	; 255
     996:	82 b9       	out	0x02, r24	; 2
#endif

	DDRB = DDB;
     998:	14 b8       	out	0x04, r1	; 4
	PORTB = PBPU;
     99a:	9f ec       	ldi	r25, 0xCF	; 207
     99c:	95 b9       	out	0x05, r25	; 5
	DDRC = DDC;
     99e:	17 b8       	out	0x07, r1	; 7
	PORTC = PCPU;
     9a0:	88 b9       	out	0x08, r24	; 8
	DDRD = DDD;
     9a2:	90 e4       	ldi	r25, 0x40	; 64
     9a4:	9a b9       	out	0x0a, r25	; 10
	PORTD = PDPU;
     9a6:	8b b9       	out	0x0b, r24	; 11

#if defined(__AVR_ATmegaXU4__) || defined(__AVR_AT90USBX6__)

	DDRE = DDE;
     9a8:	1d b8       	out	0x0d, r1	; 13
	PORTE = PEPU;
     9aa:	8e b9       	out	0x0e, r24	; 14
	DDRF = DDF;
     9ac:	10 ba       	out	0x10, r1	; 16
	PORTF = PFPU;
     9ae:	81 bb       	out	0x11, r24	; 17
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	40 93 61 00 	sts	0x0061, r20
     9ba:	80 93 61 00 	sts	0x0061, r24
     9be:	0f be       	out	0x3f, r0	; 63

	clock_prescale_set(clock_div_1); // Set clock divider to 1, full speed

	// Initialize timers

	SetTMPS(0, 64);	  // Set T0 prescaler to / 64 for query & us delay
     9c0:	83 e0       	ldi	r24, 0x03	; 3
     9c2:	85 bd       	out	0x25, r24	; 37
	SetTMPS(1, 1024); // Set T1 prescaler to / 1024 for ms delay
     9c4:	95 e0       	ldi	r25, 0x05	; 5
     9c6:	90 93 81 00 	sts	0x0081, r25

	EICRA = _B1(ISC01) | _B1(ISC00); // Need INT0 on rising edges
     9ca:	80 93 69 00 	sts	0x0069, r24

	Delay_1024(T0DEL200MS); // Allow the stick to boot
     9ce:	8b ec       	ldi	r24, 0xCB	; 203
     9d0:	93 ef       	ldi	r25, 0xF3	; 243
     9d2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>

	LED_off();
     9d6:	5e 98       	cbi	0x0b, 6	; 11
	// Hold 3 & 4, then switch from * --> **
	if ((BUTPIN & BUTMSK) == (_B1(BUT1) | _B1(BUT2) | _B0(BUT3) | _B0(BUT4)))
     9d8:	89 b1       	in	r24, 0x09	; 9
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	83 30       	cpi	r24, 0x03	; 3
     9de:	11 f4       	brne	.+4      	; 0x9e4 <init_hw+0x80>
		jmp_bootloader();
     9e0:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__stack+0x1db01>

	butt = BUTPIN; // Save current button data

	idpktsz = sw_clkcnt; // remember packetsize

	QueryFFP(-(sw_clkcnt - 6), 126); // Read ID, signal kick at -6 clk of data packet
     9e4:	c6 e0       	ldi	r28, 0x06	; 6
	}

	if (sw_clkcnt == 64) // 3DP in 1-bit mode
	{					 // Read ID, signal kick at -8 clk of data packet
						 // ID packet is 160 long + 64 or 66
		Query3DP(-(sw_clkcnt - 8), sw_clkcnt + IDSZ3DP);
     9e6:	d8 e0       	ldi	r29, 0x08	; 8
	//    if ( ClrSerial() )			// Clear serial no. condition met ?
	//	eeprom_write_byte( NULL, 0xFF ) ;	// Invalidate serial no.

	for (;;) // Forever..
	{
		Flash_LED_12MS(); // Flash LED and wait
     9e8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <Flash_LED_12MS>
		Delay_1024(T0DEL200MS);
     9ec:	8b ec       	ldi	r24, 0xCB	; 203
     9ee:	93 ef       	ldi	r25, 0xF3	; 243
     9f0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>
		// Try to read a data packet,
		QueryFFP(0, 126); // don't know how long - let it time out
     9f4:	6e e7       	ldi	r22, 0x7E	; 126
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	0e 94 f5 06 	call	0xdea	; 0xdea <QueryFFP>

		Flash_LED_12MS();
     9fc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <Flash_LED_12MS>

		// Analyze clock count

		if (!~sw_clkcnt)
     a00:	80 91 59 01 	lds	r24, 0x0159
			sw_clkcnt = 0;

		if (sw_clkcnt == (16 + 1)	  // FFP/PP in 3-bit mode
     a04:	80 91 59 01 	lds	r24, 0x0159
     a08:	81 31       	cpi	r24, 0x11	; 17
     a0a:	21 f0       	breq	.+8      	; 0xa14 <init_hw+0xb0>
			|| sw_clkcnt == (48 + 1)) // 3DPP in 1-bit mode
     a0c:	80 91 59 01 	lds	r24, 0x0159
     a10:	81 33       	cpi	r24, 0x31	; 49
     a12:	99 f5       	brne	.+102    	; 0xa7a <init_hw+0x116>
{
	uint8_t
		butt,
		idpktsz;

	butt = BUTPIN; // Save current button data
     a14:	19 b1       	in	r17, 0x09	; 9

	idpktsz = sw_clkcnt; // remember packetsize
     a16:	00 91 59 01 	lds	r16, 0x0159

	QueryFFP(-(sw_clkcnt - 6), 126); // Read ID, signal kick at -6 clk of data packet
     a1a:	80 91 59 01 	lds	r24, 0x0159
     a1e:	6e e7       	ldi	r22, 0x7E	; 126
     a20:	9c 2f       	mov	r25, r28
     a22:	98 1b       	sub	r25, r24
     a24:	89 2f       	mov	r24, r25
     a26:	0e 94 f5 06 	call	0xdea	; 0xdea <QueryFFP>

	Delay_1024(T0DEL8MS); // Give the stick some time..
     a2a:	83 e8       	ldi	r24, 0x83	; 131
     a2c:	9f ef       	ldi	r25, 0xFF	; 255
     a2e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>

	idpktsz = sw_clkcnt - idpktsz; // Sizeof ID packet
     a32:	f0 90 59 01 	lds	r15, 0x0159

	if (!QueryFFP(0, DATSZFFP)) // Signal for a regular packet, 16 triplets
     a36:	60 e1       	ldi	r22, 0x10	; 16
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	0e 94 f5 06 	call	0xdea	; 0xdea <QueryFFP>
     a3e:	88 23       	and	r24, r24
     a40:	09 f4       	brne	.+2      	; 0xa44 <init_hw+0xe0>
     a42:	6c c0       	rjmp	.+216    	; 0xb1c <init_hw+0x1b8>
		return (FALSE);			// Timed out..

	if (CheckFFPPkt(ffp_packet)) // Packet parity checks out
     a44:	0e 94 98 04 	call	0x930	; 0x930 <CheckFFPPkt.constprop.1>
     a48:	88 23       	and	r24, r24
     a4a:	09 f4       	brne	.+2      	; 0xa4e <init_hw+0xea>
     a4c:	67 c0       	rjmp	.+206    	; 0xb1c <init_hw+0x1b8>

	QueryFFP(-(sw_clkcnt - 6), 126); // Read ID, signal kick at -6 clk of data packet

	Delay_1024(T0DEL8MS); // Give the stick some time..

	idpktsz = sw_clkcnt - idpktsz; // Sizeof ID packet
     a4e:	8f 2d       	mov	r24, r15
     a50:	80 1b       	sub	r24, r16
	if (!QueryFFP(0, DATSZFFP)) // Signal for a regular packet, 16 triplets
		return (FALSE);			// Timed out..

	if (CheckFFPPkt(ffp_packet)) // Packet parity checks out
	{
		if (idpktsz == IDSZPP)
     a52:	88 32       	cpi	r24, 0x28	; 40
     a54:	11 f4       	brne	.+4      	; 0xa5a <init_hw+0xf6>
			sw_id = SW_ID_PP; // Found PP
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <init_hw+0xfc>
		else if (idpktsz == IDSZFFP)
     a5a:	8e 30       	cpi	r24, 0x0E	; 14
     a5c:	41 f4       	brne	.+16     	; 0xa6e <init_hw+0x10a>
			sw_id = SW_ID_FFP; // Found FFP
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	80 93 63 01 	sts	0x0163, r24
				sw_id = SW_ID_FFP;
		}
		else
			return (FALSE); // Unknown stick..

		CopyFFPData(ffp_packet); // Copy data to report buffer
     a64:	81 e5       	ldi	r24, 0x51	; 81
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 3b 06 	call	0xc76	; 0xc76 <CopyFFPData>
     a6c:	59 c0       	rjmp	.+178    	; 0xb20 <init_hw+0x1bc>
	{
		if (idpktsz == IDSZPP)
			sw_id = SW_ID_PP; // Found PP
		else if (idpktsz == IDSZFFP)
			sw_id = SW_ID_FFP; // Found FFP
		else if (idpktsz == 0) // 10nF timer, FFP or PP in 3bit mode
     a6e:	81 11       	cpse	r24, r1
     a70:	55 c0       	rjmp	.+170    	; 0xb1c <init_hw+0x1b8>
		{
			if ((butt & BUTMSK) == BUTMSK) // PP
     a72:	1f 70       	andi	r17, 0x0F	; 15
     a74:	1f 30       	cpi	r17, 0x0F	; 15
     a76:	99 f7       	brne	.-26     	; 0xa5e <init_hw+0xfa>
     a78:	ee cf       	rjmp	.-36     	; 0xa56 <init_hw+0xf2>
// version no. (1.00)
// QueryFFP() needs to be called before this function for a valid sw_clkcnt.

static uint8_t Init3DPro(void)
{
	if (!sw_clkcnt) // Previous trigger came up empty
     a7a:	80 91 59 01 	lds	r24, 0x0159
     a7e:	81 11       	cpse	r24, r1
     a80:	24 c0       	rjmp	.+72     	; 0xaca <init_hw+0x166>
	{
		// Set to digital mode sequence

		dis3DP_INT(); // Don't want INT to run..
     a82:	e8 98       	cbi	0x1d, 0	; 29

		Trigger();
     a84:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Trigger>

		Delay_64(T6DEL140US); // Wait 140us
     a88:	8d ed       	ldi	r24, 0xDD	; 221
     a8a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Delay_64>

		Trigger();
     a8e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Trigger>

		Delay_64((uint8_t)T6DEL865US); // Wait 140+725us
     a92:	88 e2       	ldi	r24, 0x28	; 40
     a94:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Delay_64>

		Trigger();
     a98:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Trigger>

		Delay_64(T6DEL440US); // Wait 140+300us
     a9c:	82 e9       	ldi	r24, 0x92	; 146
     a9e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <Delay_64>

		Trigger();
     aa2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <Trigger>

		Delay_1024(T0DEL4MS); // Hang out 4ms to let everything calm down
     aa6:	81 ec       	ldi	r24, 0xC1	; 193
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>

		// Try to read a data packet,
		Query3DP(0, 126); // don't know how long (64 or 66) - let it time out
     aae:	6e e7       	ldi	r22, 0x7E	; 126
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 27 07 	call	0xe4e	; 0xe4e <Query3DP>

		if (!sw_clkcnt || !~sw_clkcnt) // nothing..
     ab6:	80 91 59 01 	lds	r24, 0x0159
     aba:	88 23       	and	r24, r24
     abc:	79 f1       	breq	.+94     	; 0xb1c <init_hw+0x1b8>
     abe:	80 91 59 01 	lds	r24, 0x0159
			return (FALSE);

		Delay_1024(T0DEL4MS); // Another break for the stick
     ac2:	81 ec       	ldi	r24, 0xC1	; 193
     ac4:	9f ef       	ldi	r25, 0xFF	; 255
     ac6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>
	}

	if (sw_clkcnt == 64) // 3DP in 1-bit mode
     aca:	80 91 59 01 	lds	r24, 0x0159
     ace:	80 34       	cpi	r24, 0x40	; 64
     ad0:	79 f4       	brne	.+30     	; 0xaf0 <init_hw+0x18c>
	{					 // Read ID, signal kick at -8 clk of data packet
						 // ID packet is 160 long + 64 or 66
		Query3DP(-(sw_clkcnt - 8), sw_clkcnt + IDSZ3DP);
     ad2:	60 91 59 01 	lds	r22, 0x0159
     ad6:	80 91 59 01 	lds	r24, 0x0159
     ada:	60 56       	subi	r22, 0x60	; 96
     adc:	9d 2f       	mov	r25, r29
     ade:	98 1b       	sub	r25, r24
     ae0:	89 2f       	mov	r24, r25
     ae2:	0e 94 27 07 	call	0xe4e	; 0xe4e <Query3DP>

		Delay_1024(T0DEL8MS); // Give the 3DP some rest..
     ae6:	83 e8       	ldi	r24, 0x83	; 131
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	0e 94 54 04 	call	0x8a8	; 0x8a8 <Delay_1024>
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <init_hw+0x194>
	}
	else if (sw_clkcnt != 66) // Not 3DP in 3-bit mode
     af0:	80 91 59 01 	lds	r24, 0x0159
     af4:	82 34       	cpi	r24, 0x42	; 66
     af6:	91 f4       	brne	.+36     	; 0xb1c <init_hw+0x1b8>
		return (FALSE);

	if (!Query3DP(0, DATSZ3DP)) // Signal for a regular packet, 22 triplets
     af8:	66 e1       	ldi	r22, 0x16	; 22
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	0e 94 27 07 	call	0xe4e	; 0xe4e <Query3DP>
     b00:	88 23       	and	r24, r24
     b02:	61 f0       	breq	.+24     	; 0xb1c <init_hw+0x1b8>
		return (FALSE);			// Timed out..

	if (Check3DPPkt(sw_packet1)) // Packet 1 CRC checks out
     b04:	0e 94 87 04 	call	0x90e	; 0x90e <Check3DPPkt.constprop.0>
     b08:	88 23       	and	r24, r24
     b0a:	41 f0       	breq	.+16     	; 0xb1c <init_hw+0x1b8>
	{
		Copy3DPData(sw_packet1); // Copy data to report buffer
     b0c:	8f e4       	ldi	r24, 0x4F	; 79
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 88 06 	call	0xd10	; 0xd10 <Copy3DPData>

		sw_id = SW_ID_3DP; // Found 3DP
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	80 93 63 01 	sts	0x0163, r24
     b1a:	02 c0       	rjmp	.+4      	; 0xb20 <init_hw+0x1bc>
#endif

			break; // break forever
		}

		dis3DP_INT();
     b1c:	e8 98       	cbi	0x1d, 0	; 29
	}
     b1e:	64 cf       	rjmp	.-312    	; 0x9e8 <init_hw+0x84>

	dis3DP_INT(); // Disable INT
     b20:	e8 98       	cbi	0x1d, 0	; 29

	cli(); // Disable interrupts
     b22:	f8 94       	cli

	sw_buttons = BUTMSK; // All buttons released
     b24:	8f e0       	ldi	r24, 0x0F	; 15
     b26:	80 93 01 01 	sts	0x0101, r24
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	08 95       	ret

00000b36 <getdata>:
void getdata(void)
{
	uint8_t
		i;

	if (sw_id == SW_ID_3DP)
     b36:	80 91 63 01 	lds	r24, 0x0163
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	41 f4       	brne	.+16     	; 0xb4e <getdata+0x18>
#if SIXAXIS
		ReadADC(ADC_RX); // Read Rx
		ReadADC(ADC_RY); // Read Ry
#endif

		sw_buttons = BUTPIN; // Save current button data
     b3e:	89 b1       	in	r24, 0x09	; 9
     b40:	80 93 01 01 	sts	0x0101, r24

		i = Query3DP(0, DATSZ3DP); // Query 3DP
     b44:	66 e1       	ldi	r22, 0x16	; 22
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0e 94 27 07 	call	0xe4e	; 0xe4e <Query3DP>
     b4c:	04 c0       	rjmp	.+8      	; 0xb56 <getdata+0x20>
	}
	else
		i = QueryFFP(0, DATSZFFP); // Query FFP
     b4e:	60 e1       	ldi	r22, 0x10	; 16
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 f5 06 	call	0xdea	; 0xdea <QueryFFP>

	dis3DP_INT();
     b56:	e8 98       	cbi	0x1d, 0	; 29

	if (!i) // If query timed out,
     b58:	81 11       	cpse	r24, r1
     b5a:	15 c0       	rjmp	.+42     	; 0xb86 <getdata+0x50>
	{
		if (++sw_problem > 10) // 11th problem in a row
     b5c:	80 91 00 01 	lds	r24, 0x0100
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	80 93 00 01 	sts	0x0100, r24
     b66:	8b 30       	cpi	r24, 0x0B	; 11
     b68:	40 f0       	brcs	.+16     	; 0xb7a <getdata+0x44>
// Reboot converter. Kill USB and wait for the watchdog to catch us.
// Note: the watchdog is unleashed in main() after init_hw() returns.

static void FA_NORETURN(reboot)(void)
{
	cli(); // Disable interrupts
     b6a:	f8 94       	cli

	UDCON = _B1(DETACH);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 e0 00 	sts	0x00E0, r24
	USBCON = _B0(USBE) | _B1(FRZCLK); // Kill USB
     b72:	80 e2       	ldi	r24, 0x20	; 32
     b74:	80 93 d8 00 	sts	0x00D8, r24
     b78:	ff cf       	rjmp	.-2      	; 0xb78 <getdata+0x42>
	if (!i) // If query timed out,
	{
		if (++sw_problem > 10) // 11th problem in a row
			reboot();		   // We lost the stick, lets start over

		if (sw_id == SW_ID_3DP)
     b7a:	80 91 63 01 	lds	r24, 0x0163
     b7e:	81 30       	cpi	r24, 0x01	; 1
     b80:	c1 f4       	brne	.+48     	; 0xbb2 <getdata+0x7c>
			patchbutt(); // patch button data into last good info (3DP only)
     b82:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <patchbutt>
	}
	else
	{
		sw_problem = 0; // Reset problem counter
     b86:	10 92 00 01 	sts	0x0100, r1

		if (sw_id == SW_ID_3DP)
     b8a:	80 91 63 01 	lds	r24, 0x0163
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	41 f4       	brne	.+16     	; 0xba2 <getdata+0x6c>
		{
			if (Check3DPPkt(sw_packet1)) // If 3DP packet ok
     b92:	0e 94 87 04 	call	0x90e	; 0x90e <Check3DPPkt.constprop.0>
     b96:	88 23       	and	r24, r24
     b98:	a1 f3       	breq	.-24     	; 0xb82 <getdata+0x4c>
			{
				// LED_on() ;			// Signal good packet read

				Copy3DPData(sw_packet1); // Copy data into report
     b9a:	8f e4       	ldi	r24, 0x4F	; 79
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	0c 94 88 06 	jmp	0xd10	; 0xd10 <Copy3DPData>
				// let's just go on w/ the show.

				patchbutt(); // patch button data into last good info
			}
		}
		else if (CheckFFPPkt(ffp_packet)) // If PP/FFP packet ok
     ba2:	0e 94 98 04 	call	0x930	; 0x930 <CheckFFPPkt.constprop.1>
     ba6:	88 23       	and	r24, r24
     ba8:	21 f0       	breq	.+8      	; 0xbb2 <getdata+0x7c>
		{
			// LED_on() ;			// Signal good packet read

			CopyFFPData(ffp_packet); // Copy data into report
     baa:	81 e5       	ldi	r24, 0x51	; 81
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0c 94 3b 06 	jmp	0xc76	; 0xc76 <CopyFFPData>
     bb2:	08 95       	ret

00000bb4 <sw_repchg>:

static uint8_t sw_repchg(void)
{
	uint8_t
		r = FALSE,
		i = sw_reportsz;
     bb4:	90 91 64 01 	lds	r25, 0x0164
// Check if current report differs from the last saved one and save it.

static uint8_t sw_repchg(void)
{
	uint8_t
		r = FALSE,
     bb8:	80 e0       	ldi	r24, 0x00	; 0
		i = sw_reportsz;

	for (; i--;)
     bba:	91 50       	subi	r25, 0x01	; 1
     bbc:	70 f0       	brcs	.+28     	; 0xbda <sw_repchg+0x26>
		if (sw_repsav[i] != sw_report[i])
     bbe:	e9 2f       	mov	r30, r25
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	df 01       	movw	r26, r30
     bc4:	a4 5a       	subi	r26, 0xA4	; 164
     bc6:	be 4f       	sbci	r27, 0xFE	; 254
     bc8:	2c 91       	ld	r18, X
     bca:	ea 59       	subi	r30, 0x9A	; 154
     bcc:	fe 4f       	sbci	r31, 0xFE	; 254
     bce:	30 81       	ld	r19, Z
     bd0:	32 17       	cp	r19, r18
     bd2:	99 f3       	breq	.-26     	; 0xbba <sw_repchg+0x6>
		{
			sw_repsav[i] = sw_report[i];
     bd4:	20 83       	st	Z, r18
			r = TRUE;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	f0 cf       	rjmp	.-32     	; 0xbba <sw_repchg+0x6>
		}

	return (r);
}
     bda:	08 95       	ret

00000bdc <__vector_1>:
;-------------------------------------------------------------------------------

	.global INT0_vect

INT0_vect:
	push	temp0			; Save temp0				2		+2
     bdc:	5f 93       	push	r21
	in      temp0,SREG		; Save S register			1
     bde:	5f b7       	in	r21, 0x3f	; 63
	push	temp0			; Save SREG				2
     be0:	5f 93       	push	r21

	ldi	temp0,T6TO100US		; 					1
     be2:	57 ee       	ldi	r21, 0xE7	; 231
	out	TCNT0,temp0		; Reset timeout timer			1
     be4:	56 bd       	out	0x26, r21	; 38

	push	temp1			; Save temp1				2
     be6:	4f 93       	push	r20
	push	XL			; Save XL				2
     be8:	af 93       	push	r26
	push	XH			; Save XH				2		+4
     bea:	bf 93       	push	r27

	lds	XH,sw_pktptrH		; Load buffer pointer H			2		+5
     bec:	b0 91 58 01 	lds	r27, 0x0158
	lds	XL,sw_pktptrL		; Load buffer pointer L			2	+4
     bf0:	a0 91 57 01 	lds	r26, 0x0157

	lds	temp0,sw_clkcnt		; Load clkcnt				2		+6
     bf4:	50 91 59 01 	lds	r21, 0x0159
	mov	temp1,temp0		;					1		+7
     bf8:	45 2f       	mov	r20, r21

	inc	temp0			; Maintain clkcnt			1
     bfa:	53 95       	inc	r21
	sts	sw_clkcnt,temp0		; Save new clkcnt			2		+9
     bfc:	50 93 59 01 	sts	0x0159, r21

	in	temp0,BUTPIN		; Read the button data			1
     c00:	59 b1       	in	r21, 0x09	; 9
	swap	temp0			; AT90USBX2				1
     c02:	52 95       	swap	r21
	andi	temp0,0b11100000	; Mask B4-B2				1
     c04:	50 7e       	andi	r21, 0xE0	; 224

	andi	temp1,7			;					1	12+	01234567
     c06:	47 70       	andi	r20, 0x07	; 7
	breq	I0case0			;					1/2		21111111
     c08:	69 f0       	breq	.+26     	; 0xc24 <I0case0>
	cpi	temp1,5			;					1		 1111111
     c0a:	45 30       	cpi	r20, 0x05	; 5
	breq	I0case5			;					1/2		 1111211
     c0c:	b9 f0       	breq	.+46     	; 0xc3c <I0case5>
	cpi	temp1,2			;					1		 1111 11
     c0e:	42 30       	cpi	r20, 0x02	; 2
	breq	I0case2			;					1/2		 1211 11
     c10:	69 f0       	breq	.+26     	; 0xc2c <I0case2>
	cpi	temp1,3			;					1		 1 11 11
     c12:	43 30       	cpi	r20, 0x03	; 3
	breq	I0case3			;					1/2		 1 21 11
     c14:	f1 f0       	breq	.+60     	; 0xc52 <I0case3>
	cpi	temp1,6			;					1		 1  1 11
     c16:	46 30       	cpi	r20, 0x06	; 6
	breq	I0case6			;					1/2		 1  1 21
     c18:	e9 f0       	breq	.+58     	; 0xc54 <I0case6>
	cpi	temp1,1			;					1		 1  1  1
     c1a:	41 30       	cpi	r20, 0x01	; 1
	breq	I0case1			;					1/2		 2  1  1
     c1c:	e1 f0       	breq	.+56     	; 0xc56 <I0case1>
	cpi	temp1,4			;					1		    1  1
     c1e:	44 30       	cpi	r20, 0x04	; 4
	breq	I0case4			;					1/2		    2  1
     c20:	d9 f0       	breq	.+54     	; 0xc58 <I0case4>
	rjmp	I0case7			;					2		       2
     c22:	1b c0       	rjmp	.+54     	; 0xc5a <I0case7>

00000c24 <I0case0>:
					;							 1  1 11
					;							22684405
I0case0:
	swap	temp0			; move b7-b5 (B4-B3) to b2-b0		1
     c24:	52 95       	swap	r21
	lsr	temp0			;					1 -2
     c26:	56 95       	lsr	r21

	st	-X,temp0		; Store it				2
     c28:	5e 93       	st	-X, r21

	rjmp	Int0End			;					2		8+2=10 +21=31
     c2a:	1a c0       	rjmp	.+52     	; 0xc60 <Int0End>

00000c2c <I0case2>:

I0case2:
	lsl	temp0			; store b7 in C, b6-b5 to b7-b6		1
     c2c:	55 0f       	add	r21, r21

	ld	temp1,X			; Get current byte			2
     c2e:	4c 91       	ld	r20, X
	or	temp0,temp1		;					1
     c30:	54 2b       	or	r21, r20
	st	X,temp0			; Save to buffer			2
     c32:	5c 93       	st	X, r21

	clr	temp0			;					1
     c34:	55 27       	eor	r21, r21
	rol	temp0			; b7 to b0				1
     c36:	55 1f       	adc	r21, r21
	st	-X,temp0		; Save to buffer			2
     c38:	5e 93       	st	-X, r21

	rjmp	Int0End			;					2		  12+6=18 +21=39
     c3a:	12 c0       	rjmp	.+36     	; 0xc60 <Int0End>

00000c3c <I0case5>:

I0case5:
	bst	temp0,7			; store b7 in T				1
     c3c:	57 fb       	bst	r21, 7
	lsl	temp0			; drop b7				1
     c3e:	55 0f       	add	r21, r21
	lsl	temp0			; store b6 in C, b5 to b7		1
     c40:	55 0f       	add	r21, r21

	ld	temp1,X			; Get current byte			2
     c42:	4c 91       	ld	r20, X
	or	temp0,temp1		;					1
     c44:	54 2b       	or	r21, r20
	st	X,temp0			; Save to buffer			2
     c46:	5c 93       	st	X, r21

	clr	temp0			;					1
     c48:	55 27       	eor	r21, r21
	rol	temp0			; b6 to b0				1
     c4a:	55 1f       	adc	r21, r21
	bld	temp0,1			; b7 to b1				1
     c4c:	51 f9       	bld	r21, 1
	st	-X,temp0		; Save to buffer			2
     c4e:	5e 93       	st	-X, r21

	rjmp	Int0End			;					2		     15+4=19 +21=40
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <Int0End>

00000c52 <I0case3>:

I0case3:				; b7-b5 to b3-b1					   9+8=17 +21=38
	lsr	temp0			;					1
     c52:	56 95       	lsr	r21

00000c54 <I0case6>:
I0case6:				; b7-b5 to b4-b2					      8+10=18 +21=39
	lsr	temp0			;					1
     c54:	56 95       	lsr	r21

00000c56 <I0case1>:
I0case1:				; b7-b5 to b5-b3					 7+12=19 +21=40
	lsr	temp0			;					1
     c56:	56 95       	lsr	r21

00000c58 <I0case4>:
I0case4:				; b7-b5 to b6-b4					    6+14=20 +21=41
	lsr	temp0			;					1
     c58:	56 95       	lsr	r21

00000c5a <I0case7>:
I0case7:				; b7-b5 are right					       5+15=20 +21=41
	ld	temp1,X			; Get current byte			2
     c5a:	4c 91       	ld	r20, X
	or	temp0,temp1		;					1
     c5c:	54 2b       	or	r21, r20
	st	X,temp0			; Save to buffer			2
     c5e:	5c 93       	st	X, r21

00000c60 <Int0End>:

Int0End:
	sts	sw_pktptrL,XL		; Save buffer pointer L			2
     c60:	a0 93 57 01 	sts	0x0157, r26
	sts	sw_pktptrH,XH		; Save buffer pointer H			2
     c64:	b0 93 58 01 	sts	0x0158, r27

	pop	XH			; Restore XH				2		+11
     c68:	bf 91       	pop	r27
	pop	XL			; Restore XL				2	+4
     c6a:	af 91       	pop	r26
	pop	temp1			; Restore temp1				2
     c6c:	4f 91       	pop	r20

	pop	temp0			; Restore SREG				2
     c6e:	5f 91       	pop	r21
	out	SREG,temp0		; Restore S register			1
     c70:	5f bf       	out	0x3f, r21	; 63

	pop	temp0			; Restore temp0				2		+13
     c72:	5f 91       	pop	r21
	reti				;					4	9+
     c74:	18 95       	reti

00000c76 <CopyFFPData>:
#define	argPtrH		r25

	.global CopyFFPData

CopyFFPData:
	movw	XL,argPtrL
     c76:	dc 01       	movw	r26, r24

	; X

	ldi	temp0,4
     c78:	54 e0       	ldi	r21, 0x04	; 4
	add	XL,temp0
     c7a:	a5 0f       	add	r26, r21

	ld	temp0,X			; xl:6543210-
     c7c:	5c 91       	ld	r21, X

	com	temp0
     c7e:	50 95       	com	r21
	bst	temp0,0			;  b:9
     c80:	50 fb       	bst	r21, 0
	com	temp0
     c82:	50 95       	com	r21

	subi	XL,1
     c84:	a1 50       	subi	r26, 0x01	; 1
	ld	temp2,X			; xh:-----987
     c86:	3c 91       	ld	r19, X

	lsr	temp2			; xh:------98 [7]
     c88:	36 95       	lsr	r19
	ror	temp0			; xl:76543210
     c8a:	57 95       	ror	r21

	sts	sw_report,temp0
     c8c:	50 93 5c 01 	sts	0x015C, r21

	ldi	temp1,0b00000010
     c90:	42 e0       	ldi	r20, 0x02	; 2
	add	temp2,temp1		; Add -512
     c92:	34 0f       	add	r19, r20
	andi	temp2,0b00000011	; xh:------98
     c94:	33 70       	andi	r19, 0x03	; 3

	; Y

	ld	temp0,X			; yl:43210---
     c96:	5c 91       	ld	r21, X

	subi	XL,1
     c98:	a1 50       	subi	r26, 0x01	; 1
	ld	temp1,X			; yh:---98765
     c9a:	4c 91       	ld	r20, X

	lsr	temp1			; yh:----9876 [5]
     c9c:	46 95       	lsr	r20
	ror	temp0			; yl:543210--
     c9e:	57 95       	ror	r21

	andi	temp0,0b11111100
     ca0:	5c 7f       	andi	r21, 0xFC	; 252

	or	temp0,temp2
     ca2:	53 2b       	or	r21, r19

	sts	sw_report+1,temp0
     ca4:	50 93 5d 01 	sts	0x015D, r21

	ldi	temp2,0b00001000
     ca8:	38 e0       	ldi	r19, 0x08	; 8
	add	temp1,temp2		; Add -512
     caa:	43 0f       	add	r20, r19
	andi	temp1,0b00001111	; yh:----9876
     cac:	4f 70       	andi	r20, 0x0F	; 15

	; Hat

	subi	XL,2
     cae:	a2 50       	subi	r26, 0x02	; 2
	ld	temp0,X			;  h:--3210--
     cb0:	5c 91       	ld	r21, X

	lsl	temp0			;  h:-3210---
     cb2:	55 0f       	add	r21, r21
	lsl	temp0			;  h:3210----
     cb4:	55 0f       	add	r21, r21
	subi	temp0,0x10		; -1
     cb6:	50 51       	subi	r21, 0x10	; 16
	andi	temp0,0b11110000
     cb8:	50 7f       	andi	r21, 0xF0	; 240

	or	temp0,temp1
     cba:	54 2b       	or	r21, r20

	sts	sw_report+2,temp0
     cbc:	50 93 5e 01 	sts	0x015E, r21

	; Rz

	ld	temp2,X			; rh:------54
     cc0:	3c 91       	ld	r19, X

	ldi	temp1,0b00000010
     cc2:	42 e0       	ldi	r20, 0x02	; 2
	add	temp2,temp1		; Add -32
     cc4:	34 0f       	add	r19, r20
	andi	temp2,0b00000011
     cc6:	33 70       	andi	r19, 0x03	; 3

	inc	XL
     cc8:	a3 95       	inc	r26

	ld	temp1,X			; rl:3210----
     cca:	4c 91       	ld	r20, X
	andi	temp1,0b11110000
     ccc:	40 7f       	andi	r20, 0xF0	; 240

	or	temp2,temp1		;  r:3210--54
     cce:	34 2b       	or	r19, r20
	swap	temp2			;  r:--543210
     cd0:	32 95       	swap	r19
	lsl	temp2			;  r:-543210-
     cd2:	33 0f       	add	r19, r19
	lsl	temp2			;  r:543210--
     cd4:	33 0f       	add	r19, r19

	; B1-9

	ldi	temp0,4
     cd6:	54 e0       	ldi	r21, 0x04	; 4
	add	XL,temp0
     cd8:	a5 0f       	add	r26, r21
	ld	temp0,X			;  b:87654321
     cda:	5c 91       	ld	r21, X

	com	temp0
     cdc:	50 95       	com	r21

	lsr	temp0			;  b:-8765432 [1]
     cde:	56 95       	lsr	r21
	ror	temp2			;  r:1543210-
     ce0:	37 95       	ror	r19
	lsr	temp0			;  b:--876543 [2]
     ce2:	56 95       	lsr	r21
	ror	temp2			;  r:21543210
     ce4:	37 95       	ror	r19

	sts	sw_report+3,temp2
     ce6:	30 93 5f 01 	sts	0x015F, r19

	bld	temp0,6			;  b:-9876543
     cea:	56 f9       	bld	r21, 6

	; Throttle

	subi	XL,3
     cec:	a3 50       	subi	r26, 0x03	; 3
	ld	temp1,X			; tl:210-----
     cee:	4c 91       	ld	r20, X

	bst	temp1,5
     cf0:	45 fb       	bst	r20, 5
	bld	temp0,7			;  b:09876543
     cf2:	57 f9       	bld	r21, 7

	sts	sw_report+4,temp0
     cf4:	50 93 60 01 	sts	0x0160, r21

	subi	XL,1
     cf8:	a1 50       	subi	r26, 0x01	; 1
	ld	temp0,X			; th:----6543
     cfa:	5c 91       	ld	r21, X

	ldi	temp2,0b00001000
     cfc:	38 e0       	ldi	r19, 0x08	; 8
	add	temp0,temp2		; Add -64
     cfe:	53 0f       	add	r21, r19
	andi	temp0,0b00001111
     d00:	5f 70       	andi	r21, 0x0F	; 15

	lsl	temp1			; tl:1------- [2]
     d02:	44 0f       	add	r20, r20
	rol	temp0			; th:---65432
     d04:	55 1f       	adc	r21, r21
	lsl	temp1			; tl:-------- [1]
     d06:	44 0f       	add	r20, r20
	rol	temp0			; th:--654321
     d08:	55 1f       	adc	r21, r21

	sts	sw_report+5,temp0
     d0a:	50 93 61 01 	sts	0x0161, r21

	ret
     d0e:	08 95       	ret

00000d10 <Copy3DPData>:
;-------------------------------------------------------------------------------

	.global Copy3DPData

Copy3DPData:
	movw	XL,argPtrL
     d10:	dc 01       	movw	r26, r24

	; Get X

	ldi	temp1,5
     d12:	45 e0       	ldi	r20, 0x05	; 5
	add	XL,temp1
     d14:	a4 0f       	add	r26, r20

	ld	temp0,X			; xl:-6543210
     d16:	5c 91       	ld	r21, X

	inc	XL
     d18:	a3 95       	inc	r26
	inc	XL
     d1a:	a3 95       	inc	r26

	ld	temp2,X
     d1c:	3c 91       	ld	r19, X
	andi	temp2,0b00111000	; xh:--987---
     d1e:	38 73       	andi	r19, 0x38	; 56

	lsl	temp2			; xh:-987----
     d20:	33 0f       	add	r19, r19
	swap	temp2			; xh:-----987
     d22:	32 95       	swap	r19
	lsl	temp0			; xl:6543210-
     d24:	55 0f       	add	r21, r21
	lsr	temp2			; xh:------98 [7]
     d26:	36 95       	lsr	r19
	ror	temp0			; xl:76543210
     d28:	57 95       	ror	r21

	ldi	temp1,0xFE
     d2a:	4e ef       	ldi	r20, 0xFE	; 254
	add	temp2,temp1		; Add -512
     d2c:	34 0f       	add	r19, r20
	andi	temp2,0b00000011	; xh:------98
     d2e:	33 70       	andi	r19, 0x03	; 3

	sts	sw_report,temp0
     d30:	50 93 5c 01 	sts	0x015C, r21

	; Y

	ld	temp1,X
     d34:	4c 91       	ld	r20, X
	andi	temp1,0b00000111	; yh:-----987
     d36:	47 70       	andi	r20, 0x07	; 7

	subi	XL,3
     d38:	a3 50       	subi	r26, 0x03	; 3

	ld	temp0,X			; yl:-6543210
     d3a:	5c 91       	ld	r21, X

	lsl	temp0			; yl:6543210-
     d3c:	55 0f       	add	r21, r21
	lsr	temp1			; yh:------98 [7]
     d3e:	46 95       	lsr	r20
	ror	temp0			; yl:76543210
     d40:	57 95       	ror	r21

	ldi	temp3,0xFE
     d42:	2e ef       	ldi	r18, 0xFE	; 254
	add	temp1,temp3		; Add -512
     d44:	42 0f       	add	r20, r18
	andi	temp1,0b00000011	; yh:------98
     d46:	43 70       	andi	r20, 0x03	; 3

	lsl	temp0			; yl:6543210-
     d48:	55 0f       	add	r21, r21
	rol	temp1			; yh:-----987
     d4a:	44 1f       	adc	r20, r20
	lsl	temp0			; yl:543210--
     d4c:	55 0f       	add	r21, r21
	rol	temp1			; yh:----8976
     d4e:	44 1f       	adc	r20, r20
	or	temp0,temp2
     d50:	53 2b       	or	r21, r19

	sts	sw_report+1,temp0
     d52:	50 93 5d 01 	sts	0x015D, r21
	mov	temp2,temp1
     d56:	34 2f       	mov	r19, r20

	; Rz

	subi	XL,2
     d58:	a2 50       	subi	r26, 0x02	; 2

	ld	temp0,X			; rl:-6543210
     d5a:	5c 91       	ld	r21, X

	inc	XL
     d5c:	a3 95       	inc	r26

	ld	temp1,X
     d5e:	4c 91       	ld	r20, X
	andi	temp1,0b00011000	; rh:---87---
     d60:	48 71       	andi	r20, 0x18	; 24

	lsl	temp0			; rl:6543210-
     d62:	55 0f       	add	r21, r21
	lsl	temp1			; rh:--87----
     d64:	44 0f       	add	r20, r20
	swap	temp1			; rh:------87
     d66:	42 95       	swap	r20
	lsr	temp1			; rh:-------8 [7]
     d68:	46 95       	lsr	r20
	ror	temp0			; rl:76543210
     d6a:	57 95       	ror	r21

	com	temp1			; Add -256
     d6c:	40 95       	com	r20
	bst	temp1,0
     d6e:	40 fb       	bst	r20, 0

	swap	temp0			; rl:32107654
     d70:	52 95       	swap	r21
	mov	temp1,temp0
     d72:	45 2f       	mov	r20, r21
	andi	temp1,0b11110000	; rl:3210----
     d74:	40 7f       	andi	r20, 0xF0	; 240
	or	temp1,temp2
     d76:	43 2b       	or	r20, r19

	sts	sw_report+2,temp1
     d78:	40 93 5e 01 	sts	0x015E, r20
	andi	temp0,0b00001111	; rh:----7654
     d7c:	5f 70       	andi	r21, 0x0F	; 15
	bld	temp0,4			; rh:---87654
     d7e:	54 f9       	bld	r21, 4
	mov	temp2,temp0
     d80:	35 2f       	mov	r19, r21

	;  Hat

	subi	XL,3
     d82:	a3 50       	subi	r26, 0x03	; 3

	ld	temp0,X
     d84:	5c 91       	ld	r21, X
	andi	temp0,0b01110000	; h:-210----
     d86:	50 77       	andi	r21, 0x70	; 112

	ldi	temp1,7
     d88:	47 e0       	ldi	r20, 0x07	; 7
	add	XL,temp1
     d8a:	a4 0f       	add	r26, r20

	ld	temp1,X			; h:-3------
     d8c:	4c 91       	ld	r20, X

	bst	temp1,6
     d8e:	46 fb       	bst	r20, 6
	bld	temp0,7			; h:3210----
     d90:	57 f9       	bld	r21, 7
	subi	temp0,0x10
     d92:	50 51       	subi	r21, 0x10	; 16

	bst	temp0,7
     d94:	57 fb       	bst	r21, 7
	lsl	temp0			; h:210-----
     d96:	55 0f       	add	r21, r21
	or	temp0,temp2
     d98:	53 2b       	or	r21, r19

	sts	sw_report+3,temp0
     d9a:	50 93 5f 01 	sts	0x015F, r21
	clr	temp2
     d9e:	33 27       	eor	r19, r19
	bld	temp2,0			; h:-------3
     da0:	30 f9       	bld	r19, 0

	;  Buttons 1-8

	dec	XL
     da2:	aa 95       	dec	r26

	ld	temp0,X			; b:-7654321
     da4:	5c 91       	ld	r21, X

	subi	XL,3
     da6:	a3 50       	subi	r26, 0x03	; 3

	ld	temp1,X			; b:-89-----
     da8:	4c 91       	ld	r20, X
	bst	temp1,6
     daa:	46 fb       	bst	r20, 6
	bld	temp0,7			; b:87654321
     dac:	57 f9       	bld	r21, 7

	com	temp0
     dae:	50 95       	com	r21

	clr	temp1
     db0:	44 27       	eor	r20, r20
	lsl	temp0			; b:7654321-
     db2:	55 0f       	add	r21, r21
	rol	temp1			; b:-------8
     db4:	44 1f       	adc	r20, r20
	or	temp0,temp2
     db6:	53 2b       	or	r21, r19

	sts	sw_report+4,temp0
     db8:	50 93 60 01 	sts	0x0160, r21
	mov	temp2,temp1
     dbc:	34 2f       	mov	r19, r20

	; Slider

	subi	XL,2
     dbe:	a2 50       	subi	r26, 0x02	; 2

	ld	temp0,X			; sl:-6543210
     dc0:	5c 91       	ld	r21, X

	inc	XL
     dc2:	a3 95       	inc	r26
	inc	XL
     dc4:	a3 95       	inc	r26

	ld	temp1,X
     dc6:	4c 91       	ld	r20, X
	andi	temp1,0b00000111	; sh:-----987
     dc8:	47 70       	andi	r20, 0x07	; 7

	lsl	temp0			; sl:6543210-
     dca:	55 0f       	add	r21, r21
	lsr	temp1			; sh:------98 [7]
     dcc:	46 95       	lsr	r20
	ror	temp0			; sl:76543210
     dce:	57 95       	ror	r21

	ldi	temp3,0xFE
     dd0:	2e ef       	ldi	r18, 0xFE	; 254
	add	temp1,temp3		; Add -512
     dd2:	42 0f       	add	r20, r18
	andi	temp1,0b00000011
     dd4:	43 70       	andi	r20, 0x03	; 3

	bst	temp0,7
     dd6:	57 fb       	bst	r21, 7
	lsl	temp0			; sl:6543210-
     dd8:	55 0f       	add	r21, r21
	or	temp0,temp2
     dda:	53 2b       	or	r21, r19

	sts	sw_report+5,temp0
     ddc:	50 93 61 01 	sts	0x0161, r21

	lsl	temp1			; sh:-----98-
     de0:	44 0f       	add	r20, r20
	bld	temp1,0
     de2:	40 f9       	bld	r20, 0

	sts	sw_report+6,temp1
     de4:	40 93 62 01 	sts	0x0162, r20

	ret
     de8:	08 95       	ret

00000dea <QueryFFP>:
#define	resOkL		r24

	.global QueryFFP

QueryFFP:
	mov	temp1,argID
     dea:	48 2f       	mov	r20, r24
	mov	temp2,argSZ
     dec:	36 2f       	mov	r19, r22

	clr	resOkL			; Default return 0
     dee:	88 27       	eor	r24, r24

	cli				; Disable interrupts
     df0:	f8 94       	cli

	sbi	EIFR,INTF0		; Clear INT condition
     df2:	e0 9a       	sbi	0x1c, 0	; 28
	sbi	EIMSK,INT0		; Enable INT
     df4:	e8 9a       	sbi	0x1d, 0	; 29

	clr	temp3
     df6:	22 27       	eor	r18, r18

	sbis	BUTPIN,BUT1		; Button 1 pressed ?
     df8:	48 9b       	sbis	0x09, 0	; 9
	ser	temp3			; Yes, have to swallow 1st INT..
     dfa:	2f ef       	ldi	r18, 0xFF	; 255

	ldi	temp0,_B1(PSRSYNC)	; reset prescaler
     dfc:	51 e0       	ldi	r21, 0x01	; 1
	out	GTCCR,temp0
     dfe:	53 bd       	out	0x23, r21	; 35

	ldi	temp0,T6TO400US
     e00:	5c e9       	ldi	r21, 0x9C	; 156
	out	TCNT0,temp0		; Set up initial timeout
     e02:	56 bd       	out	0x26, r21	; 38

	sbi	TIFR0,TOV0		; Clear overflow flag
     e04:	a8 9a       	sbi	0x15, 0	; 21

	sts	sw_clkcnt,temp3		; Preset clock counter
     e06:	20 93 59 01 	sts	0x0159, r18

	ldi	temp0,lo8(sw_pktstart)	; &ffp_packet[6]
     e0a:	57 e5       	ldi	r21, 0x57	; 87
	sts	sw_pktptrL,temp0
     e0c:	50 93 57 01 	sts	0x0157, r21
	ldi	temp0,hi8(sw_pktstart)	; &ffp_packet[6]
     e10:	51 e0       	ldi	r21, 0x01	; 1
	sts	sw_pktptrH,temp0
     e12:	50 93 58 01 	sts	0x0158, r21

	sei				;				1
     e16:	78 94       	sei

00000e18 <Ptrigger>:

Ptrigger:
	cbi	TRGDDR,TRGX1BIT		;				2
     e18:	24 98       	cbi	0x04, 4	; 4
	cbi	TRGDDR,TRGY2BIT		;				2
     e1a:	25 98       	cbi	0x04, 5	; 4

	ldi	temp0,TRGWAIT		; wait 48us
     e1c:	50 e0       	ldi	r21, 0x00	; 0
1:	dec	temp0
     e1e:	5a 95       	dec	r21
	brne	1b
     e20:	f1 f7       	brne	.-4      	; 0xe1e <Ptrigger+0x6>

	sbi	TRGDDR,TRGX1BIT		;				2
     e22:	24 9a       	sbi	0x04, 4	; 4
	sbi	TRGDDR,TRGY2BIT		;				2
     e24:	25 9a       	sbi	0x04, 5	; 4

00000e26 <Ploop>:

Ploop:
	lds	temp0,sw_clkcnt		;					+2
     e26:	50 91 59 01 	lds	r21, 0x0159
	cp	temp0,temp3		; Anything new ?		1
     e2a:	52 17       	cp	r21, r18
	brne	Pgotsome		;				1/2 = 2/3
     e2c:	19 f4       	brne	.+6      	; 0xe34 <Pgotsome>

	sbis	TIFR0,TOV0		; Timeout ? Skip if TOV set	1/2
     e2e:	a8 9b       	sbis	0x15, 0	; 21
	rjmp	Ploop			; Wait some more		2 = 4
     e30:	fa cf       	rjmp	.-12     	; 0xe26 <Ploop>

	ret				; Signal timeout, return 0
     e32:	08 95       	ret

00000e34 <Pgotsome>:

Pgotsome:
	lds	temp0,sw_clkcnt		;				1	+1
     e34:	50 91 59 01 	lds	r21, 0x0159

	sub	temp0,temp3		; # clk's that occured		1
     e38:	52 1b       	sub	r21, r18
	add	temp3,temp0		; Correct clkcnt copy		1
     e3a:	25 0f       	add	r18, r21

	cp	temp3,temp2		; Got all we need ?		1
     e3c:	23 17       	cp	r18, r19
	brsh	Pdone			; Yes, done			1/2 = 6
     e3e:	28 f4       	brcc	.+10     	; 0xe4a <Pdone>

	tst	temp1			; Kick pending ?		1
     e40:	44 23       	and	r20, r20
	brpl	Ploop			; Nope				1/2 = 8
     e42:	8a f7       	brpl	.-30     	; 0xe26 <Ploop>

	add	temp1,temp0		; Kick due ?			1
     e44:	45 0f       	add	r20, r21
	brmi	Ploop			; Nope				1/2 = 10
     e46:	7a f3       	brmi	.-34     	; 0xe26 <Ploop>

	rjmp	Ptrigger		; Yes, kick			2 = 11
     e48:	e7 cf       	rjmp	.-50     	; 0xe18 <Ptrigger>

00000e4a <Pdone>:

Pdone:					; Packet arrived..
	inc	resOkL			; Signal Ok, return 1
     e4a:	83 95       	inc	r24
	ret
     e4c:	08 95       	ret

00000e4e <Query3DP>:
;-------------------------------------------------------------------------------

	.global Query3DP

Query3DP:
	rcall	QueryFFP
     e4e:	cd df       	rcall	.-102    	; 0xdea <QueryFFP>

	tst	resOkL
     e50:	88 23       	and	r24, r24
	breq	Qexit
     e52:	a9 f0       	breq	.+42     	; 0xe7e <Qexit>

	lds	temp0,sw_clkcnt
     e54:	50 91 59 01 	lds	r21, 0x0159
	cpi	temp0,DATSZ3DP		; If it's a data packet..
     e58:	56 31       	cpi	r21, 0x16	; 22
	brne	Qexit
     e5a:	89 f4       	brne	.+34     	; 0xe7e <Qexit>

	cli
     e5c:	f8 94       	cli
	clr	temp0
     e5e:	55 27       	eor	r21, r21
	sts	sw_clkcnt,temp0		; Correct SWclkcnt and ptr so the next
     e60:	50 93 59 01 	sts	0x0159, r21

	lds	temp0,sw_pktptrL
     e64:	50 91 57 01 	lds	r21, 0x0157
	lds	temp1,sw_pktptrH
     e68:	40 91 58 01 	lds	r20, 0x0158
	ldi	temp2,1
     e6c:	31 e0       	ldi	r19, 0x01	; 1
	add	temp0,temp2
     e6e:	53 0f       	add	r21, r19
	clr	temp2
     e70:	33 27       	eor	r19, r19
	adc	temp1,temp2
     e72:	43 1f       	adc	r20, r19
	sts	sw_pktptrL,temp0
     e74:	50 93 57 01 	sts	0x0157, r21
	sts	sw_pktptrH,temp1
     e78:	40 93 58 01 	sts	0x0158, r20

	sei
     e7c:	78 94       	sei

00000e7e <Qexit>:
Qexit:
	ret
     e7e:	08 95       	ret

00000e80 <main>:

//------------------------------------------------------------------------------

int FA_NORETURN(main)(void)
{
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	1f 92       	push	r1
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
		susp,
		sw_sendrep;

	// Initialize..

	init_hw(); // hardware.
     e8a:	0e 94 b2 04 	call	0x964	; 0x964 <init_hw>

	sw_reportsz = // report size
     e8e:	80 91 63 01 	lds	r24, 0x0163
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	11 f4       	brne	.+4      	; 0xe9a <main+0x1a>
     e96:	87 e0       	ldi	r24, 0x07	; 7
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <main+0x1c>
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	80 93 64 01 	sts	0x0164, r24
		(sw_id == SW_ID_3DP ? SW_REPSZ_3DP : SW_REPSZ_FFP);

	usb_init(); // USB stack
     ea0:	0e 94 44 02 	call	0x488	; 0x488 <usb_init>

	sei(); // Enable interrupts
     ea4:	78 94       	sei

	SetTMPS(1, 64);	  // Set T1 prescaler to /64
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	80 93 81 00 	sts	0x0081, r24
	SetTMPS(0, 1024); // Set T0 prescaler to / 1024 for delay
     eac:	85 e0       	ldi	r24, 0x05	; 5
     eae:	85 bd       	out	0x25, r24	; 37

	susp = TRUE;
	sw_sendrep = sw_repchg(); // Init send report flag, saved report
     eb0:	0e 94 da 05 	call	0xbb4	; 0xbb4 <sw_repchg>
     eb4:	c8 2e       	mov	r12, r24
	sei(); // Enable interrupts

	SetTMPS(1, 64);	  // Set T1 prescaler to /64
	SetTMPS(0, 1024); // Set T0 prescaler to / 1024 for delay

	susp = TRUE;
     eb6:	91 e0       	ldi	r25, 0x01	; 1
	sw_sendrep = sw_repchg(); // Init send report flag, saved report
	timer = 0;
     eb8:	21 2c       	mov	r2, r1
     eba:	31 2c       	mov	r3, r1
				}
			}
		}
		else
		{
			ResetTM(1, IDLE_DEL); // reset idle timer
     ebc:	08 e1       	ldi	r16, 0x18	; 24
     ebe:	1c ef       	ldi	r17, 0xFC	; 252
     ec0:	dd 24       	eor	r13, r13
     ec2:	d3 94       	inc	r13
			ResetTM(0, READ_DEL); // reset SW timer
     ec4:	31 ed       	ldi	r19, 0xD1	; 209
     ec6:	b3 2e       	mov	r11, r19
				if (!--idle_cnt)
				{
					if (LED_sts())
					{
						timer = 0xFFFF;
						idle_cnt = 10;
     ec8:	4a e0       	ldi	r20, 0x0A	; 10
     eca:	a4 2e       	mov	r10, r20
			{
				susp = TRUE;

				// Shut down things we don't need

				wdt_disable();
     ecc:	58 e1       	ldi	r21, 0x18	; 24
     ece:	95 2e       	mov	r9, r21
			{
				LED_on();
				// Send report
				usb_send_IN(sw_report, sw_reportsz);

				sw_sendrep = FALSE;	  // reset send report flag
     ed0:	81 2c       	mov	r8, r1
				wdt_enable(WDTO_500MS); // Unleash watchdog
			}

			if (TMexp(0)) // Time to read the stick
			{
				SetTMPS(0, 64); // Set T0 prescaler to / 64 for query
     ed2:	63 e0       	ldi	r22, 0x03	; 3
     ed4:	76 2e       	mov	r7, r22
				getdata();		// read 3DP data

				SetTMPS(0, 1024); // Set T0 prescaler to / 1024 for delay
     ed6:	75 e0       	ldi	r23, 0x05	; 5
     ed8:	67 2e       	mov	r6, r23
				idle_cnt = idle_rate; // reset idle counter

				ResetTM(0, READ_DEL);
				ResetTM(1, IDLE_DEL);

				wdt_enable(WDTO_500MS); // Unleash watchdog
     eda:	e8 e1       	ldi	r30, 0x18	; 24
     edc:	ee 2e       	mov	r14, r30
     ede:	f1 2c       	mov	r15, r1
     ee0:	fd e0       	ldi	r31, 0x0D	; 13
     ee2:	5f 2e       	mov	r5, r31
	sw_sendrep = sw_repchg(); // Init send report flag, saved report
	timer = 0;

	for (;;) // Forever..
	{
		wdt_reset(); // Calm watchdog
     ee4:	a8 95       	wdr

		if (usb_configured())
     ee6:	99 83       	std	Y+1, r25	; 0x01
     ee8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <usb_configured>
     eec:	99 81       	ldd	r25, Y+1	; 0x01
     eee:	88 23       	and	r24, r24
     ef0:	09 f4       	brne	.+2      	; 0xef4 <main+0x74>
     ef2:	60 c0       	rjmp	.+192    	; 0xfb4 <main+0x134>
		{
			if (susp) // Coming out of suspend
     ef4:	99 23       	and	r25, r25
     ef6:	09 f1       	breq	.+66     	; 0xf3a <main+0xba>
     ef8:	80 e8       	ldi	r24, 0x80	; 128
     efa:	98 2d       	mov	r25, r8
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	80 93 61 00 	sts	0x0061, r24
     f04:	90 93 61 00 	sts	0x0061, r25
     f08:	0f be       	out	0x3f, r0	; 63
				// Turn things back on

				// Set clock divider to 1, full speed
				clock_prescale_set(clock_div_1);

				clr_bits(PRR0, _BV(PRTIM0) | _BV(PRTIM1));
     f0a:	80 91 64 00 	lds	r24, 0x0064
     f0e:	87 7d       	andi	r24, 0xD7	; 215
     f10:	80 93 64 00 	sts	0x0064, r24

				idle_cnt = idle_rate; // reset idle counter
     f14:	80 91 6d 01 	lds	r24, 0x016D
     f18:	80 93 65 01 	sts	0x0165, r24

				ResetTM(0, READ_DEL);
     f1c:	b6 bc       	out	0x26, r11	; 38
     f1e:	d5 ba       	out	0x15, r13	; 21
				ResetTM(1, IDLE_DEL);
     f20:	10 93 85 00 	sts	0x0085, r17
     f24:	00 93 84 00 	sts	0x0084, r16
     f28:	d6 ba       	out	0x16, r13	; 22

				wdt_enable(WDTO_500MS); // Unleash watchdog
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	a8 95       	wdr
     f30:	e0 92 60 00 	sts	0x0060, r14
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	50 92 60 00 	sts	0x0060, r5
			}

			if (TMexp(0)) // Time to read the stick
     f3a:	a8 9b       	sbis	0x15, 0	; 21
     f3c:	0c c0       	rjmp	.+24     	; 0xf56 <main+0xd6>
			{
				SetTMPS(0, 64); // Set T0 prescaler to / 64 for query
     f3e:	75 bc       	out	0x25, r7	; 37
				getdata();		// read 3DP data
     f40:	0e 94 9b 05 	call	0xb36	; 0xb36 <getdata>

				SetTMPS(0, 1024); // Set T0 prescaler to / 1024 for delay
     f44:	65 bc       	out	0x25, r6	; 37
				ResetTM(0, READ_DEL);
     f46:	b6 bc       	out	0x26, r11	; 38
     f48:	d5 ba       	out	0x15, r13	; 21

				if (sw_repchg())	   // Report changed,
     f4a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <sw_repchg>
     f4e:	88 23       	and	r24, r24
     f50:	11 f0       	breq	.+4      	; 0xf56 <main+0xd6>
					sw_sendrep = TRUE; // need to send it
     f52:	cc 24       	eor	r12, r12
     f54:	c3 94       	inc	r12
			}

			if (TMexp(1)) // Idle timed out
     f56:	b0 99       	sbic	0x16, 0	; 22
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <main+0xe0>

				if (!--idle_cnt && idle_rate) // Idle counter expired, rate not indef.
					sw_sendrep = TRUE;		  // need to send current report
			}

			if (sw_sendrep && !usb_IN_busy())
     f5a:	cc 20       	and	r12, r12
     f5c:	49 f1       	breq	.+82     	; 0xfb0 <main+0x130>
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <main+0x104>
					sw_sendrep = TRUE; // need to send it
			}

			if (TMexp(1)) // Idle timed out
			{
				ResetTM(1, IDLE_DEL);
     f60:	10 93 85 00 	sts	0x0085, r17
     f64:	00 93 84 00 	sts	0x0084, r16
     f68:	d6 ba       	out	0x16, r13	; 22

				if (!--idle_cnt && idle_rate) // Idle counter expired, rate not indef.
     f6a:	80 91 65 01 	lds	r24, 0x0165
     f6e:	81 50       	subi	r24, 0x01	; 1
     f70:	80 93 65 01 	sts	0x0165, r24
     f74:	81 11       	cpse	r24, r1
     f76:	f1 cf       	rjmp	.-30     	; 0xf5a <main+0xda>
     f78:	80 91 6d 01 	lds	r24, 0x016D
     f7c:	88 23       	and	r24, r24
     f7e:	69 f3       	breq	.-38     	; 0xf5a <main+0xda>
					sw_sendrep = TRUE;		  // need to send current report
     f80:	cc 24       	eor	r12, r12
     f82:	c3 94       	inc	r12
			}

			if (sw_sendrep && !usb_IN_busy())
     f84:	0e 94 7d 02 	call	0x4fa	; 0x4fa <usb_IN_busy>
     f88:	81 11       	cpse	r24, r1
     f8a:	12 c0       	rjmp	.+36     	; 0xfb0 <main+0x130>
			{
				LED_on();
     f8c:	5e 9a       	sbi	0x0b, 6	; 11
				// Send report
				usb_send_IN(sw_report, sw_reportsz);
     f8e:	60 91 64 01 	lds	r22, 0x0164
     f92:	8c e5       	ldi	r24, 0x5C	; 92
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 96 02 	call	0x52c	; 0x52c <usb_send_IN>

				sw_sendrep = FALSE;	  // reset send report flag
				idle_cnt = idle_rate; // reset idle counter
     f9a:	80 91 6d 01 	lds	r24, 0x016D
     f9e:	80 93 65 01 	sts	0x0165, r24
				ResetTM(1, IDLE_DEL); // reset idle timer
     fa2:	10 93 85 00 	sts	0x0085, r17
     fa6:	00 93 84 00 	sts	0x0084, r16
     faa:	d6 ba       	out	0x16, r13	; 22

				LED_off();
     fac:	5e 98       	cbi	0x0b, 6	; 11
			{
				LED_on();
				// Send report
				usb_send_IN(sw_report, sw_reportsz);

				sw_sendrep = FALSE;	  // reset send report flag
     fae:	c1 2c       	mov	r12, r1
				idle_cnt = idle_rate; // reset idle counter
				ResetTM(1, IDLE_DEL); // reset idle timer

				LED_off();
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	98 cf       	rjmp	.-208    	; 0xee4 <main+0x64>
			}
		}
		else if (usb_suspend)
     fb4:	80 91 5b 01 	lds	r24, 0x015B
     fb8:	88 23       	and	r24, r24
     fba:	09 f4       	brne	.+2      	; 0xfbe <main+0x13e>
     fbc:	3e c0       	rjmp	.+124    	; 0x103a <main+0x1ba>
		{
			if (!susp) // Going into suspend
     fbe:	91 11       	cpse	r25, r1
     fc0:	1a c0       	rjmp	.+52     	; 0xff6 <main+0x176>
			{
				susp = TRUE;

				// Shut down things we don't need

				wdt_disable();
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	90 92 60 00 	sts	0x0060, r9
     fca:	10 92 60 00 	sts	0x0060, r1
     fce:	0f be       	out	0x3f, r0	; 63

				set_bits(PRR0, _BV(PRTIM0) | _BV(PRTIM1));
     fd0:	80 91 64 00 	lds	r24, 0x0064
     fd4:	88 62       	ori	r24, 0x28	; 40
     fd6:	80 93 64 00 	sts	0x0064, r24
     fda:	e0 e8       	ldi	r30, 0x80	; 128
     fdc:	fd 2d       	mov	r31, r13
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	e0 93 61 00 	sts	0x0061, r30
     fe6:	f0 93 61 00 	sts	0x0061, r31
     fea:	0f be       	out	0x3f, r0	; 63
				// Set clock divider to 2, half speed

				clock_prescale_set(clock_div_2);

				timer = 0xFFFF;
				idle_cnt = 10;
     fec:	a0 92 65 01 	sts	0x0165, r10

				// Set clock divider to 2, half speed

				clock_prescale_set(clock_div_2);

				timer = 0xFFFF;
     ff0:	22 24       	eor	r2, r2
     ff2:	2a 94       	dec	r2
     ff4:	32 2c       	mov	r3, r2
				idle_cnt = 10;
			}

			if (!--timer)
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	28 1a       	sub	r2, r24
     ffa:	31 08       	sbc	r3, r1
     ffc:	21 14       	cp	r2, r1
     ffe:	31 04       	cpc	r3, r1
    1000:	11 f0       	breq	.+4      	; 0x1006 <main+0x186>
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	6f cf       	rjmp	.-290    	; 0xee4 <main+0x64>
			{
				timer = 0xFFFF;

				if (!--idle_cnt)
    1006:	80 91 65 01 	lds	r24, 0x0165
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	80 93 65 01 	sts	0x0165, r24
    1010:	88 23       	and	r24, r24
    1012:	29 f0       	breq	.+10     	; 0x101e <main+0x19e>
    1014:	91 e0       	ldi	r25, 0x01	; 1
				idle_cnt = 10;
			}

			if (!--timer)
			{
				timer = 0xFFFF;
    1016:	22 24       	eor	r2, r2
    1018:	2a 94       	dec	r2
    101a:	32 2c       	mov	r3, r2
    101c:	63 cf       	rjmp	.-314    	; 0xee4 <main+0x64>

				if (!--idle_cnt)
				{
					if (LED_sts())
    101e:	5e 9b       	sbis	0x0b, 6	; 11
    1020:	04 c0       	rjmp	.+8      	; 0x102a <main+0x1aa>
					{
						timer = 0xFFFF;
						idle_cnt = 10;
    1022:	a0 92 65 01 	sts	0x0165, r10
						LED_off();
    1026:	5e 98       	cbi	0x0b, 6	; 11
    1028:	f5 cf       	rjmp	.-22     	; 0x1014 <main+0x194>
					}
					else
					{
						timer = 30;
						idle_cnt = 1;
    102a:	d0 92 65 01 	sts	0x0165, r13
						LED_on();
    102e:	5e 9a       	sbi	0x0b, 6	; 11
    1030:	91 e0       	ldi	r25, 0x01	; 1
						idle_cnt = 10;
						LED_off();
					}
					else
					{
						timer = 30;
    1032:	8e e1       	ldi	r24, 0x1E	; 30
    1034:	28 2e       	mov	r2, r24
    1036:	31 2c       	mov	r3, r1
    1038:	55 cf       	rjmp	.-342    	; 0xee4 <main+0x64>
				}
			}
		}
		else
		{
			ResetTM(1, IDLE_DEL); // reset idle timer
    103a:	10 93 85 00 	sts	0x0085, r17
    103e:	00 93 84 00 	sts	0x0084, r16
    1042:	d6 ba       	out	0x16, r13	; 22
			ResetTM(0, READ_DEL); // reset SW timer
    1044:	b6 bc       	out	0x26, r11	; 38
    1046:	d5 ba       	out	0x15, r13	; 21
    1048:	4d cf       	rjmp	.-358    	; 0xee4 <main+0x64>

0000104a <__eerd_byte_usb1286>:
    104a:	f9 99       	sbic	0x1f, 1	; 31
    104c:	fe cf       	rjmp	.-4      	; 0x104a <__eerd_byte_usb1286>
    104e:	92 bd       	out	0x22, r25	; 34
    1050:	81 bd       	out	0x21, r24	; 33
    1052:	f8 9a       	sbi	0x1f, 0	; 31
    1054:	99 27       	eor	r25, r25
    1056:	80 b5       	in	r24, 0x20	; 32
    1058:	08 95       	ret

0000105a <__eewr_byte_usb1286>:
    105a:	26 2f       	mov	r18, r22

0000105c <__eewr_r18_usb1286>:
    105c:	f9 99       	sbic	0x1f, 1	; 31
    105e:	fe cf       	rjmp	.-4      	; 0x105c <__eewr_r18_usb1286>
    1060:	1f ba       	out	0x1f, r1	; 31
    1062:	92 bd       	out	0x22, r25	; 34
    1064:	81 bd       	out	0x21, r24	; 33
    1066:	20 bd       	out	0x20, r18	; 32
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	fa 9a       	sbi	0x1f, 2	; 31
    106e:	f9 9a       	sbi	0x1f, 1	; 31
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	08 95       	ret

00001076 <_exit>:
    1076:	f8 94       	cli

00001078 <__stop_program>:
    1078:	ff cf       	rjmp	.-2      	; 0x1078 <__stop_program>
